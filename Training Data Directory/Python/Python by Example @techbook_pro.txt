Python by Example
Learning to Program in 150 Challenges
Python is today’s fastest growing programming language. This engaging and refreshingly
different guide breaks down the skills into clear step-by-step chunks and explains the theory using brief easy-to-understand language. Rather than bamboozling readers with pages
of mind-numbing technical jargon, this book includes 150 practical challenges, putting
the power in the reader’s hands. Through creating programs to solve these challenges the
reader will quickly progress from mastering the basics to confidently using subroutines,
a graphical user interface, and linking to external text, csv and SQL files. This book is
perfect for anyone who wants to learn how to program with Python. In particular, students
starting out in computer science and teachers who want to improve their confidence in
Python will find here a set of ready-made challenges for classroom use.
N I C H O L A L A C E Y is Director of Nichola Wilkin Ltd. She is a trusted source for
teaching resources, having sold thousands of resources to schools around the world. As one
of the most popular authors on TES, Nichola enjoys an extremely high review rating with
hundreds of thousands of downloads. She was a programmer before moving into corporate
training and then retraining as a teacher, and she gained a unique skill set of programming
and practical classroom experience after being promoted to head of computer science in a
private boys’ school.

PYTHON BY E X AMPL E
Learning to Program in 150 Challenges

NICHOLA LACEY
Nichola Wilkin Ltd

University Printing House, Cambridge CB2 8BS, United Kingdom
One Liberty Plaza, 20th Floor, New York, NY 10006, USA
477 Williamstown Road, Port Melbourne, VIC 3207, Australia
314–321, 3rd Floor, Plot 3, Splendor Forum, Jasola District Centre, New Delhi – 110025, India
79 Anson Road, #06-04/06, Singapore 079906
Cambridge University Press is part of the University of Cambridge.
It furthers the University’s mission by disseminating knowledge in the pursuit of
education, learning, and research at the highest international levels of excellence.
www.cambridge.org
Information on this title: www.cambridge.org/9781108716833
DOI: 10.1017/9781108591942
© Nichola Lacey 2019
This publication is in copyright. Subject to statutory exception
and to the provisions of relevant collective licensing agreements,
no reproduction of any part may take place without the written
permission of Cambridge University Press.
First published 2019
Printed in Singapore by Markono Print Media Pte Ltd
A catalogue record for this publication is available from the British Library.
ISBN 978-1-108-71683-3 Paperback
Cambridge University Press has no responsibility for the persistence or accuracy
of URLs for external or third-party internet websites referred to in this publication
and does not guarantee that any content on such websites is, or will remain,
accurate or appropriate.

Contents
Image Credits ........................................................................................................... vi
Introduction ............................................................................................................... 1
Downloading Python ................................................................................................. 4
Some Tips .................................................................................................................. 6
Part I: Learning Python
Challenges 1 - 11:
The Basics ............................................................................. 11
Challenges 12 - 19: If Statements ......................................................................... 17
Challenges 20 - 26: Strings ................................................................................... 24
Challenges 27 - 34: Maths ..................................................................................... 31
Challenges 35 - 44: For Loop ................................................................................. 35
Challenges 45 - 51: While Loop............................................................................. 40
Challenges 52 - 59: Random ................................................................................. 45
Challenges 60 - 68: Turtle Graphics ..................................................................... 51
Challenges 69 - 79: Tuples, Lists and Dictionaries .............................................. 58
Challenges 80 - 87: More String Manipulation ..................................................... 67
Challenges 88 - 95: Numeric Arrays ..................................................................... 72
Challenges 96 - 103: 2D Lists and Dictionaries ...................................................... 79
Challenges 105 - 110: Reading and Writing to a Text File ....................................... 86
Challenges 111- 117: Reading and Writing to a .csv File ........................................ 91
Challenges 118 - 123: Subprograms ........................................................................ 99
Challenges 124 - 132: Tkinter GUI .......................................................................... 110
Challenges 133 - 138: More Tkinter ........................................................................ 124
Challenges 139 - 145: SQLite .................................................................................. 134
Part II: Chunky Challenges
Challenge 146: Shift Code ...................................................................................... 150
Challenge 147: Mastermind .................................................................................... 153
Challenge 148: Passwords ...................................................................................... 156
Challenge 149: Times Table (GUI).......................................................................... 161
Challenge 150: Art Gallery ...................................................................................... 164

What Next? ............................................................................................................. 169
Glossary .................................................................................................................. 170
Index ....................................................................................................................... 182

v

Image Credits
Animal Drawings:
Pages 1, 9, 11, 31, 35, 37, 41, 45, 92, 125, 127, 138, 150, 165: HelenField/Shutterstock.com
Pages 16, 20, 94 and141(bottom): Victoria Novak/Shutterstock.com
Pages 27 and 157: Dimonika/Shutterstock.com
Pages 46, 58, 73, 93, 95, 103, 128, 135, 147, 169: mart/Shutterstock.com
Pages 59, 68, 151, 154: lynea/Shutterstock.com
Page 80: MoreVector/Shutterstock.com
All other animal drawings: Olga_Angelloz/Shutterstock.com
Other decorative icons:
MG Drachal/Shutterstock.com
Mila Petkova/Shutterstock.com
Nikolaeva/Shutterstock.com
Tiwat K/Shutterstock.com

vi

Introduction

1

Introduction
If you have ever picked up a programming manual and felt your forehead go
clammy and your eyes cross as you attempt to make sense of the longwinded explanations, this is the guide for you.
I have been in your position, attempting to learn how to program and having to rely on the
traditional style of guides. I know from painful experience how quickly I glaze over and my
brain solidifies; after only a few pages the tedium leaves me blindly reading words without
any real notion of what they mean any more. Inevitably I give up and the whole process
makes me feel like a limp failure, gasping for breath after I surface from drowning in
technical jargon.
I hated having to read through pointless drivel and then be presented with a short program
telling me exactly what to type in and then spend the next 20 pages reading about what I
have just done and the 101 ways I could run it. I hated having no control
over trying things out for myself and I hated the way these guides would
only contain one or two challenges at the end of a chapter of theory.
I knew there had to be a better way, and thankfully there is. I wrote it and
you are presently reading it, so aren’t you lucky? This guide is refreshingly
different and helps you learn how to program with Python by using practical examples
rather than self-important explanations.
Many programmers learn through
experimentation, looking at others’ code and
working out what method is best for a given
situation. This book is a hands-on approach to
learning programming. After minimal reading
you are set a number of challenges to create the
programs. You can explore and experiment with
the programming language and look at the
example solutions to learn how to think like a
programmer. There are no chapters entitled
“the architecture of a computer”, “the theory of
programming” or any other gobbledy-gook
other authors like to waste time with. I don’t
want to baffle you with theory or blind you with
overbearing explanations that suck out your
enthusiasm for learning to program.

2

Introduction

Hopefully, you want to get stuck into creating programs, solving problems and enjoying the
sense of accomplishment that you get as you proudly look over your lines of code, knowing
that you created something that works. That is great, your eagerness is to be applauded
and I salute those who are reading this while already sitting at their computers, fingers
poised and ready to get going. If that is the case, that you already have Python open on your
screen and are itching to get going, then away you go and I’ll see you in the first chapter
called “The Basics” on page 11.
For everyone who is still with us and is feeling a little more timid, there are just a few more
things to tell you about before you take the plunge.

How to Use This Book
This book builds from very simple programs to more complex ones. If you are new to
programming or new to Python, start with “The Basics” and work through the chapters in
order.
If you are familiar with Python programming and feel confident with the
basics, the theory and logic surrounding programming, then you can just dip
in and out of the book to get help on the specifics you need.
The book is split into two sections:

Part I
In Part I, each chapter takes you through some basic programming rules and challenges for
you to complete and includes:
x a simple explanation giving you pointers, which is useful if you are new to
programming in Python;
x examples of code with a short explanation, which you can use as a basis to solve the
challenges;
x a list of challenges for you to work through that get harder as you move through them.
Each challenge should only take between a couple of minutes and 20 minutes to solve;
however, some of the more complex challenges near the end of Part I will take longer
as you build up the techniques you will be using. Don’t panic if you take longer than
this, as long as you solve the problems without too much copying from the suggested
solution, you are doing fine;
x code containing a possible solution for each challenge; there is often more than one
answer available, but we include just a single program as a possible solution that you
can refer to if you get stuck on a particular aspect of the code.

Introduction

3

Part II
In Part II, you are given some larger challenges which utilize the programming skills you
learnt in Part I and allow you to consolidate and reinforce the techniques you have been
practising. In this section, you are not given the help and example code that is given in Part
I and it will take longer to solve each challenge. After each challenge, you are given one
possible answer that you may find useful if you are stuck. However, you may have found
another solution that works just as well.

Who Is This Book
For?
This book is suitable for anyone who wants to learn how
to program with Python. It is an essential tool for
teachers and students in Key Stage 3 or those studying
computer science who need help and ready-made
examples to practise programming techniques and
build confidence. It can also be used to help with a
computer science programming project resource bank,
to help pupils needing additional support or just a quick
reminder of the syntax when creating programs.

4

Downloading Python

Downloading Python
You can download Python for free from the official Python website:

www.python.org/downloads/

Click on the latest version (in the example above, click on the Download Python 3.6.2 button)
to start the installation.
The program will download an executable (.exe) file. When you run this program, you will
see an install window like the one shown below.

Click the Install Now option and the program will start installing Python onto your system.

Downloading Python

5

Running Python
To start Python on a Windows system, click on the Windows icon or Start menu and select
the IDLE (Python version number) option as highlighted below.

6

Some Tips

Some Tips
File Location
On a Windows system, the Python folder is usually found in the C:\ drive and will be named
Python36 (or similar) and the files will automatically be saved in the same location, unless
you save them specifically in another location.

Using Comments
Comments are a very useful tool for programmers. They serve two purposes:
x adding an explanation of how the program works;
x stopping parts of the program from working temporarily so you can run
and test other parts of the program.
The first, and original, purpose of explaining how a program works is so other programmers
can make sense of your programs in case your code needs to be altered and updated in the
future and to remind you about why you wrote particular lines of code.

In this example, comments have been added at the end of the last three lines. They are
shown in red and start with the # symbol.
In reality, you would not add comments on lines which contain obvious code as it would
clutter the screen; you would only add comments where necessary.
As Python knows to ignore anything after a # symbol, programmers soon started to use # at
the start of lines of their code to block out sections they do not want to run so they can focus
on and test others.

Some Tips

7

In this example, the # has been added to the first line of the program to
temporarily stop it from running. To bring it back into the running order
simply delete the # and the code will be reactivated.
In this guide, we have not included any comments to the programs so you have to read the
code to make sense of it. That way you will really learn how to code! If you are creating
programs as part of your coursework you should add comments to explain your
programming to the examiner.

Formatting Python
In most versions of Python IDLE it is possible to quickly add comments and indent code
using the menus. This way, if you need to block out entire areas using a comment you
simply highlight the lines and then select the Format menu and select Comment Out
Region. Similarly, if you need to indent a region (we will look at the reason for indenting
code later) then you can also easily do this with the menu.

Okay, that is all the “housekeeping” out of the way. No more procrastinating; take a deep
breath and away we go…

Part I
Learning Python

10

Challenges 1 - 11: Part I

Challenges 1 - 11: The Basics

11

Challenges 1 - 11

The Basics
Explanation
This is the shell window and is the first screen you see when you launch Python.

It is possible to write Python code straight into the shell, but as soon as
you hit [Return] at the end of a line, it will run that line of code. This may
be suitable for using Python as a quick calculator; for instance, you can
type in 3*5 at the prompt and Python will show the answer 15 on the
next line; however, this style of inputting is not useful for more complex
programs.
It is much better to start a new window, create all the code in the new window,
save your code and run it.
To create a new window in which to write your code, select File and New.
Once you enter your code in this new window you can save it and run it all in one
go. This will then run the code in the shell window.
Alternatively, Python programs can be written using
any text editor and must be saved with the file name
extension .py in order to work. These programs can
then be run from the command prompt by typing in the
full directory root and file name.

12

Challenges 1 - 11: The Basics

Running Your Program
Every time you run the code your program will need to be saved afresh in case there have
been any changes to it.
In this version of Python, you can run the program by selecting the Run menu and
selecting Run Module. Alternatively, you can press the [F5] key. If this is the first time
the program is saved, Python will prompt you to name and save the file before it will allow
the program to run.

Important Things to Note
When Writing Your
Programs
Python is case sensitive so it is important that you use the correct case, otherwise
your code will not work.
Text values need to appear in speech marks (") but numbers do
not.
When naming variables (i.e. values that you want to store
data in) you cannot use any dedicated words such as print,
input, etc. otherwise your code will not work.
When saving your files do not save them with any
dedicated words that Python already uses, such as print,
input, etc. If you do this it will not run and you will need to
rename the file before it works.
To edit a program you have saved and closed, right-click on the
file and select Edit with IDLE. If you just double-click on
the file it will only try to run it and you will not be able to edit it.

Challenges 1 - 11: The Basics

13

Example Code
num1 = 93

answer = num1 + num2

Set the value of a variable, if
there is not a variable already
created, it will create one. A
variable is a container for a value
(in this case the variable will be
called “num1” and store the value
93). The value stored in the variable
can change while the program is
running. The variable can be called
whatever you want (except Python
dedicated words such as print,
save, etc.) and it must start with a
letter rather than a number or
symbol and have no spaces.

Adds together num1 and num2 and stores the
answer in a variable called answer.

answer = num1 - num2
Subtracts num2 from num1 and stores the
answer in a variable called answer.

answer = num1 * num2
Multiplies num1 by num2 and stores the
answer in a variable called answer.

answer = num1 / num2
Divides num1 by num2 and stores the answer
in a variable called answer.

answer = num1 // num2
A whole number division (i.e. 9//4 = 2) and
stores the answer in a variable called answer.

print (“This is a message”)
Displays the message in the brackets. As the value we want displayed is a text value it
has the speech marks, which will not be displayed in the output. If you wanted to display
a numerical value or the contents of a variable, the speech marks are not needed.

print (“First line\nSecond line”)
“\n” is used as a line break.

print (“The answer is”, answer)
Displays the text “The answer is” and the value of the variable answer.

textValue = input(“Enter a text value: ”)
Displays the question “Enter a text value: ” and stores the value the user enters in a
variable called textValue. The space after the colon allows a space to be added before
the user enters their answer, otherwise they appear squashed unattractively together.

numValue = int(input(“Enter a number: ”))
Displays the question “Enter a number: ” and stores the value as an
integer (a whole number) in a variable called numValue Integers can be
used in calculations but variables stored as text cannot.

14

Challenges 1 - 11: The Basics

Challenges
001

002

Ask for the user’s first name and
display the output message
Hello [First Name] .

Ask for the user’s first name and then ask for
their surname and display the output message
Hello [First Name] [Surname].

003
Write code that will display the joke “What do you call a bear with no
teeth?” and on the next line display the answer “A gummy bear!” Try to
create it using only one line of code.

004

005

006

Ask the user to enter
two numbers. Add
them together and
display the answer as

Ask the user to enter three
numbers. Add together the first
two numbers and then multiply
this total by the third. Display the
answer as The answer is
[answer].

Ask how many slices
of pizza the user
started with and ask
how many slices
they have eaten.
Work out how many
slices they have left
and display the
answer in a userfriendly format.

The total is
[answer].

007
Ask the user for their name and their age. Add 1 to their age
and display the output [Name] next birthday you
will be [new age].

008

009

Ask for the total price of the bill, then ask how
many diners there are. Divide the total bill by the
number of diners and show how much each
person must pay.

Write a program
that will ask for a
number of days
and then will
show how many
hours, minutes
and seconds are
in that number of
days.

010
There are 2,204 pounds in a kilogram. Ask the
user to enter a weight in kilograms and convert it
to pounds.

011
Task the user to enter a number over 100 and then enter a number under
10 and tell them how many times the smaller number goes into the larger
number in a user-friendly format.

Keep
going,
you
are
doing
well.

Challenges 1 - 11: The Basics

Answers
001

002

003
004

005

006

007

008

15

16

Challenges 1 - 11: The Basics

009

010

011

How did you do?
Don’t forget, the
skills you are
learning now will
help you later.

Challenges 12 - 19: If Statements

17

Challenges 12 - 19

If Statements
Explanation
If statements allow your program to make a decision and change the route that is
taken through the program.

Below is how the if statement for this flow chart would look in Python.

18

Challenges 12 - 19: If Statements

Indenting Lines of Code
Indenting is very important in Python as it shows the lines that are dependent on others, as
shown in the example on the previous page. In order to indent text you can use your [Tab]
key or you can press your [space key] five times. The [backspace] key will remove
indents.
The first line of the if statement tests a condition, and if that condition is met (i.e. the first
condition is true) then the lines of code directly below it are run. If it is not met (i.e. the first
condition is false) it will test the second condition, if there is one, and so on. Below are
examples of the different comparison and logical operators you can use in the condition
line of your if statement.

Comparison
Operators

Logical
Operators

Operator

Description

Operator

Description

==

Equal to

and

Both conditions must be met

!=

Not equal to

or

Either condition must be met

>

Greater than

<

Less than

>=

Greater than or equal to

<=

Less than or equal to

Challenges 12 - 19: If Statements

19

Example Code
Please note: In the examples
shown, num is a variable
entered by the user that has
been stored as an integer.

if num > 10:
print(“This is over 10”)
else:
print(“This is not over 10”)
If num1 is over 10, it will display the message “This is
over 10”, otherwise it will display the message “This is
under 10”.

if num > 10:
print(“This is over 10”)
elif num == 10:
print(“This is equal to 10”)
else:
print(“This is under 10”)
If num1 is over 10, it will display the message “This is
over 10”, otherwise it will check the next condition. If
num1 is equal to 10, it will display the message “This is
equal to 10”. Otherwise, if neither of the first two
conditions have been met, it will display the message
“This is under 10”.

if num >= 10:
if num <= 20:
print(“This is between 10 and 20”)
else:
print(“This is over 20”)
else:
print(“This is under 10”)
If num1 is 10 or more then it will test another if statement to see if num1 is less than or
equal to 20. If it is, it will display the message “This is between 10 and 20”. If num1 is not
less than or equal to 20 then it will display the message “This is over 20”. If num1 is not
over 10, it will display the message “This is under 10”.

text = str.lower(text)
Changes the text to lower case. As Python is case sensitive, this
changes the data input by the user into lower case so it is easier to
check.

20

Challenges 12 - 19: If Statements

num = int(input(“Enter a number between 10 and 20: ”))
if num >= 10 and num <= 20:
print(“Thank you”)
else:
print(“Out of range”)
This uses and to test multiple conditions in the if statement. Both the conditions must
be met to produce the output “Thank you”.

num = int(input(“Enter an EVEN number between 1 and 5: ”))
if num == 2 or num == 4:
print(“Thank you”)
else:
print(“Incorrect”)
This uses or to test the conditions in the if statement. Just one condition must be met
to display the output “Thank you”.

Challenges 12 - 19: If Statements

21

Challenges
012

013

014

Ask for two numbers. If
the first one is larger
than the second, display
the second number first
and then the first
number, otherwise show
the first number first and
then the second.

Ask the user to enter a
number that is under
20. If they enter a
number that is 20 or
more, display the
message “Too high”,
otherwise display
“Thank you”.

Ask the user to enter a
number between 10 and 20
(inclusive). If they enter a
number within this range,
display the message “Thank
you”, otherwise display the
message “Incorrect
answer”.

015
Ask the user to enter their favourite colour. If they enter “red”, “RED” or
“Red” display the message “I like red too”, otherwise display the message
“I don’t like [colour], I prefer red”.

016
Ask the user if it is raining and convert their answer to lower case
so it doesn’t matter what case they type it in. If they answer “yes”,
ask if it is windy. If they answer “yes” to this second question,
display the answer “It is too windy for an umbrella”, otherwise
display the message “Take an umbrella”. If they did not answer yes
to the first question, display the answer “Enjoy your day”.

017

018

Ask the user’s age. If they
are 18 or over, display the
message “You can vote”, if
they are aged 17, display the
message “You can learn to
drive”, if they are 16, display
the message “You can buy a
lottery ticket”, if they are
under 16, display the
message “You can go Trickor-Treating”.

Ask the user to enter a number. If it is under 10,
display the message “Too low”, if their number is
between 10 and 20, display “Correct”, otherwise
display “Too high”.

019
Ask the user to enter 1, 2 or 3. If they enter a 1, display
the message “Thank you”, if they enter a 2, display
“Well done”, if they enter a 3, display “Correct”. If
they enter anything else, display “Error message”.

22

Challenges 12 - 19: If Statements

Answers
012

013

014

015

Challenges 12 - 19: If Statements

016

017

018

019

23

24

Challenges 20 - 26: Strings

Challenges 20 - 26

Strings
Explanation
String is the technical name for text. To define a block of code as a string, you need to
include it in either double quotes (") or single quotes ('). It doesn’t matter which you use so
long as you are consistent.
There are some characters you need to be particularly careful with when inputting them
into strings. These include:

"'\
That is because these symbols have special meanings in Python and it can get confusing if
you use them in a string.
If you want to use one of these symbols you need to
precede it with a backslash symbol and then Python will
know to ignore the symbol and will treat it as normal text
that is to be displayed.

Symbol

How to type this into a Python
string

"

\"

'

\'

\

\\

Challenges 20 - 26: Strings

25

Strings and Numbers as
Variables
If you define a variable as a string, even if it only contains numbers, you cannot later use
that string as part of a calculation. If you want to use a variable that has been defined as a
string in a calculation, you will have to convert the string to a number before it can be used.

In this example, the author has asked for a number, but has not defined it as a numeric
value and when the program is run they will get the following error:

Although this error message looks scary, it is simply saying that the line
total = num + 10 isn’t working as the variable num is defined as
a string.
This problem can be solved in one of two ways. You
can either define it as a number when the variable is
being originally created, using this line:

or you can convert it to a number after it has been
created using this line:

26

Challenges 20 - 26: Strings

The same can happen with strings.

In this program, the user is asked to enter their name and a number. They want it joined
together and with strings the addition symbol is used as concatenation. When this
code is run you will get a similar error message to before:

To get around this, either don’t define the variable as a number in the first place or convert
it to a string afterwards using the line:

Multiple-Line Strings
If you want to input a string across multiple lines you can either use the line break (\n) or
you can enclose the entire thing in triple quotes. This will preserve the formatting of the
text.

Challenges 20 - 26: Strings

27

Example Code
Please note: In the following examples, the terms word, phrase, name, firstname and
surname are all variable names.

len(word)

word.upper()

Finds the length of the variable called word.

Changes the string into upper case.

print(word.capitalize())
Displays the variable so only the first word
has a capital letter at the beginning and
everything else is in lower case.

word.lower()
Changes the string into lower case.

word.title()
name = firstname+surname
Joins the first name and surname together
without a space between them, known as
concatenation

Changes a phrase so that every word
has a capital letter at the beginning
with the rest of the letters in the
word in lower case (i.e.Title Case).

text = “ This is some text. ”
print(text.strip(“ ”))
Removes extra characters (in this case spaces) from the start and end of a string.

print (“Hello world”[7:10])
Each letter is assigned an index number to
identify its position in the phrase, including
the space. Python starts counting from 0, not
1.

Therefore, in this example, it would display
the value of positions 7, 8 and 9 ,which is
“orl”.

28

Challenges 20 - 26: Strings

Challenges
020

021

Ask the user to enter
their first name and
then display the
length of their name.

Ask the user to enter their first name and then ask them to
enter their surname. Join them together with a space between
and display the name and the length of whole name.

022
Ask the user to enter their first name and surname in lower
case. Change the case to title case and join them together.
Display the finished result.

023

024

Ask the user to type in the first
line of a nursery rhyme and
display the length of the string.
Ask for a starting number and an
ending number and then display
just that section of the text
(remember Python starts
counting from 0 and not 1).

Ask the user to type in any word and display it in
upper case.

025
Ask the user to enter their first name. If the length
of their first name is under five characters, ask
them to enter their surname and join them
together (without a space) and display the name
in upper case. If the length of the first name is five
or more characters, display their first name in
lower case.

Don’t forget, you can always look
back, remind yourself of some of
the earlier skills you have learnt.
You have learnt a great deal so far.

026
Pig Latin takes the first consonant of a word,
moves it to the end of the word and adds on an
“ay”. If a word begins with a vowel you just add
“way” to the end. For example, pig becomes igpay,
banana becomes ananabay, and aadvark becomes
aadvarkway. Create a program that will ask the
user to enter a word and change it into Pig Latin.
Make sure the new word is displayed in lower case.

Challenges 20 - 26: Strings

Answers
020

021

022

023

024

29

30
025

026

Challenges 20 - 26: Strings

Challenges 27 - 34: Maths

31

Challenges 27 - 34

Maths
Explanation
Python can perform several mathematical functions, but these are only available when the
data is treated as either an integer (a whole number) or a floating-point (a
number with a decimal place). If data is stored as a string, even if it only contains numeric
characters, Python is unable to perform calculations with it (see page 24 for a fuller
explanation).

Example Code
Please note: In order to use some of the mathematical functions (math.sqrt(num)
and math.pi) you will need to import the maths
print(round(num,2))
library at the start of your program. You do this by
typing import math as the first line of your
Displays a number rounded to
two decimal places.
program.

**

math.sqrt(num)

To the power of
(e.g. 102 is 10**2).

The square root of a number, but you must have the line import
math at the top of your program for this to work.

num=float(input(“Enter number: “))
Allows numbers with a decimal point dividing the integer and fraction part.

math.pi
Gives you pi (π) to 15 decimal places,
but you must have the line import
math at the top of your program for
this to work.

x // y
Whole number division (e.g.15//2 gives
the answer 7).

x % y
Finds the remainder (e.g. 15%2 gives
the answer 1).

32

Challenges 27 - 34: Maths

Challenges
027

028

Ask the user to enter a
number with lots of
decimal places. Multiply
this number by two and
display the answer.

Update program 027 so that it will display the answer to
two decimal places.

030
Display pi (π) to five
decimal places.

029
Ask the user to enter an integer that is over 500. Work
out the square root of that number and display it to two
decimal places.

031
Ask the user to enter the radius of a circle
(measurement from the centre point to the edge). Work
out the area of the circle (π*radius2).

032

033

Ask for the radius and the depth of a cylinder
and work out the total volume (circle
area*depth) rounded to three decimal
places.

Ask the user to enter two numbers.
Use whole number division to divide
the first number by the second and
also work out the remainder and
display the answer in a user-friendly
way (e.g. if they enter 7 and 2 display
“7 divided by 2 is 3 with 1
remaining”).

034
Display the following message:

If the user enters 1, then it should ask them for
the length of one of its sides and display the
area. If they select 2, it should ask for the base
and height of the triangle and display the area. If
they type in anything else, it should give them a
suitable error message.

You are
starting to
think like a
programmer.

Challenges 27 - 34: Maths

Answers
027

028

029

030

031

032

033

33

34
034

Challenges 27 - 34: Maths

Challenges 35 - 44: For Loop

35

Challenges 35 - 44

For Loop
Explanation
A for loop allows Python to keep repeating code a set number of times. It is sometimes
known as a counting loop because you know the number of times the loop will run
before it starts.

In this case, it starts at 1 and will keep repeating the loop
(displaying i) until it reaches 10 and then stops. This is how this
loop would look in Python

In this example, the outputs would be 1, 2, 3, 4, 5, 6, 7, 8 and 9.
When it gets to 10 the loop would stop so 10 would
not be shown in the output.

Remember to indent the lines
of code within the for loop.

36

Challenges 35 - 44: For Loop

Example Code
The range function is often used in for loops and lists the starting number, the ending
number and can also include the steps (e.g. counting in 1s, 5s or any other value you wish).

for i in range(1,10):
print(i)
This loop uses a variable called “i” to keep track of the number of times
the loop has been repeated. It will start i at 1 (as that is the starting
value in the range function) and repeat the loop, adding 1 to i each time
and displaying the value of i until it reaches 10 (as dictated by the range
function), where it will stop. Therefore, it will not repeat the loop a tenth
time and will only have the following output:

1, 2, 3, 4, 5, 6, 7, 8, 9

for i in range(1,10,2):
print(i)

for i in range(10,1,-3):
print(i)

This range function includes a third value
which shows how much is added to i in
each loop (in this case 2). The output will
therefore be: 1, 3, 5, 7, 9

This range will subtract 3 from i each
time. The output will be: 10, 7, 4

Using loops is a
powerful programming
tool that you will use a
lot in the more
challenging programs.

for i in word:
print(i)
This would display each character in a
string called “word” as a separate
output (i.e. on a separate line).

Challenges 35 - 44: For Loop

37

Challenges
035

036

Ask the user to enter
their name and then
display their name
three times.

Alter program 035 so that it will ask the user to enter their
name and a number and then display their name that
number of times.

038
Change program
037 to also ask for a
number. Display
their name (one
letter at a time on
each line) and
repeat this for the
number of times
they entered.

037
Ask the user to enter their name and display each letter in
their name on a separate line.

039
Ask the user to enter a number between 1
and 12 and then display the times table for
that number.

041
Ask the user to enter their
name and a number. If the
number is less than 10, then
display their name that
number of times; otherwise
display the message “Too
high” three times.

040
Ask for a number below 50 and then count down from
50 to that number, making sure you show the number
they entered in the output.

042
Set a variable called total to 0. Ask the user to enter
five numbers and after each input ask them if they
want that number included. If they do, then add the
number to the total. If they do not want it included,
don’t add it to the total. After they have entered all five
numbers, display the total.

043
Ask which direction the user wants to count (up or down). If they select up, then ask
them for the top number and then count from 1 to that number. If they select down, ask
them to enter a number below 20 and then count down from 20 to that number. If they
entered something other than up or down, display the message “I don’t understand”.

044
Ask how many people the user wants to invite to a party. If they enter a number below
10, ask for the names and after each name display “[name] has been invited”. If they
enter a number which is 10 or higher, display the message “Too many people”.

38

Challenges 35 - 44: For Loop

Answers
035

036

037

038

039

040

Challenges 35 - 44: For Loop

041

042

043

044

39

40

Challenges 45 - 51: While Loop

Challenges 45 - 51

While Loop
Explanation
A while loop allows code to be repeated an unknown number of times
as long as a condition is being met. This may be 100 times, just the once or
even never. In a while loop the condition is checked before the code is run,
which means it could skip the loop altogether if the condition is not being
met to start with. It is important, therefore, to make sure the correct
conditions are in place to run the loop before it starts.

In Python the example for the flow chart above would look as follows:

It will keep repeating this code until the user enters anything other than “yes”.

Challenges 45 - 51: While Loop

41

Example Code
total = 0
while total < 100:
num = int(input(“Enter a number: ”))
total = total + num
print(“The total is”, total)
The above program will create a variable called total and store the
value as 0. It will ask the user to enter a number and will add it to
the total. It will keep repeating this as long as the total is still
below 100. When the total equals 100 or more, it will stop running
the loop and display the total.

Comparison Operators

Logical Operators

Operator

Description

Operator

Description

==

Equal to

and

Both conditions must be met

!=

Not equal to

or

Either condition must be met

>

Greater than

<

Less than

in speech marks and numeric values

>=

Greater than or equal to

do not.

<=

Less than or equal to

Remember: text values must appear

42

Challenges 45 - 51: While Loop

Challenges
045

046

Set the total to 0 to start with. While the total is 50 or less, ask
the user to input a number. Add that number to the total and
print the message “The total is… [total]”. Stop the loop when
the total is over 50.

Ask the user to enter
a number. Keep
asking until they enter
a value over 5 and
then display the
message “The last
number you entered
was a [number]” and
stop the program.

047
Ask the user to enter a
number and then enter
another number. Add these
two numbers together and
then ask if they want to add
another number. If they
enter “y", ask them to enter
another number and keep
adding numbers until they
do not answer “y”. Once the
loop has stopped, display
the total.

049
Create a variable called
compnum and set the value
to 50. Ask the user to enter a
number. While their guess
is not the same as the
compnum value, tell them if
their guess is too low or too
high and ask them to have
another guess. If they enter
the same value as
compnum, display the
message “Well done, you
took [count] attempts”.

048
Ask for the name of somebody the user wants to invite
to a party. After this, display the message “[name] has
now been invited” and add 1 to the count. Then ask if
they want to invite somebody else. Keep repeating this
until they no longer want to invite anyone else to the
party and then display how many people they have
coming to the party.

050
Ask the user to enter a number between
10 and 20. If they enter a value under 10,
display the message “Too low” and ask
them to try again. If they enter a value
above 20, display the message “Too high”
and ask them to try again. Keep repeating
this until they enter a value that is
between 10 and 20 and then display the
message “Thank you”.

051
Using the song “10 green bottles”, display the lines “There are [num] green bottles
hanging on the wall, [num] green bottles hanging on the wall, and if 1 green bottle
should accidentally fall”. Then ask the question “how many green bottles will be
hanging on the wall?” If the user answers correctly, display the message “There will be
[num] green bottles hanging on the wall”. If they answer incorrectly, display the
message “No, try again” until they get it right. When the number of green bottles gets
down to 0, display the message “There are no more green bottles hanging on the wall”.

Challenges 45 - 51: While Loop

Answers
045

046

047

048

049

43

44
050

051

Challenges 45 - 51: While Loop

Challenges 52 - 59: Random

45

Challenges 52 - 59

Random
Explanation
Python can generate random values. In reality, the values are not
completely random as no computer can cope with that; instead it uses an
incredibly complex algorithm that makes it virtually impossible to accurately
predict its outcome so, in effect, it acts like a random function.
There are two types of random value that we will be looking at:
x Random numbers within a specified range;
x A random choice from a range of items that are input.
To use these two options, you will need to import the random library. You do
this by typing import random at the start of your program.

46

Challenges 52 - 59: Random

Example Code
import random

num = random.random()

This must appear at
the start of your
program otherwise
the random
function will not
work.

Selects a random floating-point number between 0 and 1 and
stores it in a variable called “num”. If you want to obtain a
larger number, you can multiply it as shown below:

import random
num = random.random()
num = num * 100
print(num)

num = random.randint(0,9)
Selects a random whole number
between 0 and 9 (inclusive).

You
are
doing
great!

num1 = random.randint(0,1000)
num2 = random.randint(0,1000)
newrand = num1/num2
print(newrand)
Creates a random floating-point number by
creating two random integers within two
large ranges (in this case between 0 and
1000) and dividing one by the other.

num = random.randrange(0,100,5)
Picks a random number between the
numbers 0 and 100 (inclusive) in steps of five,
i.e. it will only pick from 0, 5, 10, 15, 20, etc.

colour = random.choice([“red”,“black”,“green”])
Picks a random value from the options “red”, “black” or “green” and stores it as the
variable “colour”. Remember: strings need to include speech marks but numeric data
does not.

Challenges 52 - 59: Random

47

Challenges
052

053

054

Display a
random
integer
between
1 and 100
inclusive.

Display a
random
fruit from
a list of
five fruits.

Randomly choose either heads or tails (“h” or “t”). Ask
the user to make their choice. If their choice is the same
as the randomly selected value, display the message
“You win”, otherwise display “Bad luck”. At the end, tell
the user if the computer selected heads or tails.

055
Randomly choose a number between 1 and 5. Ask the user to pick a
number. If they guess correctly, display the message “Well done”,
otherwise tell them if they are too high or too low and ask them to pick a
second number. If they guess correctly on their second guess, display
“Correct”, otherwise display “You lose”.

056

057

Randomly pick a whole number between 1
and 10. Ask the user to enter a number and
keep entering numbers until they enter the
number that was randomly picked.

Update
program 056
so that it
tells the
user if they
are too high
or too low
before they
pick again.

058
Make a maths quiz that asks five questions by randomly
generating two whole numbers to make the question
(e.g. [num1] + [num2]). Ask the user to enter the
answer. If they get it right add a point to their score. At
the end of the quiz, tell them how many they got correct
out of five.

059
Display five colours and ask the user to pick one. If they
pick the same as the program has chosen, say “Well
done”, otherwise display a witty answer which involves
the correct colour, e.g. “I bet you are GREEN with envy”
or “You are probably feeling BLUE right now”. Ask
them to guess again; if they have still not got it right,
keep giving them the same clue and ask the user to
enter a colour until they guess it correctly.

48

Challenges 52 - 59: Random

Answers
052

053

054

055

Challenges 52 - 59: Random

056

057

058

49

50
059

Challenges 52 - 59: Random

Challenges 60 - 68: Turtle Graphics

51

Challenges 60 - 68

Turtle Graphics
Explanation
It is possible to draw using a turtle in Python. By typing in commands
and using loops, you can create intricate patterns. Here is how it works.
A turtle will travel along a path that you define, leaving a pen mark behind it. As you control
the turtle, the pattern that is left is revealed. To draw the pentagon shown below you would
type in the following code.

By combining these simple shapes and using nested loops (i.e. loops inside other loops)
it is possible to create beautiful patterns very easily.

In the above pattern, one pentagon has been repeatedly drawn 10 times, rotating 36
degrees around a central point. Please note: we have highlighted one of the pentagons
to help you identify it within the pattern, but it would not usually be highlighted.

52

Challenges 60 - 68: Turtle Graphics

Example Code
import turtle

scr = turtle.Screen()

This line needs to be included
at the beginning of your
program to import the turtle
library into Python, allowing
you to use the turtle functions.

Defines the window as being
called “scr”. This means we can
use the shorthand “scr”, rather
than having to refer to the window
by its full name each time.

scr.bgcolor(“yellow”)

turtle.penup()

turtle.pendown()

Sets the screen background
colour to yellow. By default, the
background colour will be
white unless it is changed.

Removes the pen from
the page so that as the
turtle moves it does not
leave a trail behind it.

turtle.pensize(3)

turtle.left(120)

Changes the turtle pen size
(the thickness of the line that is
drawn) to 3. By default, this is 1
unless it is changed.

Turns the turtle 120° to
the left (counter
clockwise).

Places the pen on the
page so that when the
turtle moves it will
leave a trail behind it.
By default, the pen is
down unless specified
otherwise.

turtle.right(90)
Turns the turtle 90° to
the right (clockwise).

turtle.forward(50)
Moves the turtle forward 50
steps.

turtle.shape(“turtle”)
Changes the shape of the turtle to look like a turtle
. By default, the turtle will look like a small arrow.

turtle.hideturtle()
Hides the turtle so it is not
showing on the screen.

turtle.showturtle()
Shows the turtle on the screen.
By default, the turtle is
showing unless specified
otherwise.

turtle.begin_fill()
Entered before the code that draws a shape so it
knows to fill in the shape it is drawing.

turtle.end_fill()
Entered after the code that is drawing the shape to
tell Python to stop filling in the shape.

turtle.color(“black”,“red”)

turtle.exitonclick()

Defines the colours filling in the shape. This
example will make the shape have a black outline
and a red fill. This needs to be entered before the
shape is drawn.

When the user clicks on the
turtle window it will
automatically close.

Challenges 60 - 68: Turtle Graphics

53

Challenges
060

061

Draw a square.

Draw a triangle.

062

063

Draw a circle.

Draw three squares
in a row with a gap
between each. Fill
them using three
different colours.

065
Write the numbers as shown below,
starting at the bottom of the number
one.

064
Draw a five-pointed
star.

066
Draw an octagon that uses a different colour (randomly
selected from a list of six possible colours) for each line.

067
Create the following pattern:

068
Draw a pattern that will change each time the
program is run. Use the random function to pick
the number of lines, the length of each line and
the angle of each turn.

Your
programming
skills are
growing with
every
challenge you
complete.

54

Challenges 60 - 68: Turtle Graphics

Answers
060

061

062

Challenges 60 - 68: Turtle Graphics

063

064

55

56
065

Challenges 60 - 68: Turtle Graphics

Challenges 60 - 68: Turtle Graphics

066

067

068

57

58

Challenges 69 - 79: Tuples, Lists and Dictionaries

Challenges 69 - 79

Tuples, Lists and
Dictionaries
Explanation
So far, we have used variables that can store a single item of data in them. When you used
the random.choice([“red”,“blue”,“green”]) line of code you are picking a
random item from a list of possible options. This demonstrates that one item can hold
several pieces of separate data, in this case a collection of colours.
There are several ways that collections of data can be stored as a
single item. Three of the simpler ones are:
x tuples
x lists
x dictionaries

Tuples
Once a tuple is defined you cannot change what is stored in it. This means that when you
write the program you must state what the data is that is being stored in the tuple and the
data cannot be altered while the program is running. Tuples are usually used for menu
items that would not need to be changed.

Lists
The contents of a list can be changed while the program is running and lists are one of
the most common ways to store a collection of data under one variable name in Python. The
data in a list does not all have to be of the same data type. For example, the same list can
store both strings and integers; however, this can cause problems later and is therefore not
recommended.
Please note: In other programming languages the term array is often used
to describe a variable that contains a collection of data, and these work in a similar way to

Challenges 69 - 79: Tuples, Lists and Dictionaries

59

lists in Python. There is a data type called an array in Python, but this is only used to store
numbers and we will look at Python numeric arrays on page 72.

Dictionaries
The contents of a dictionary can also be changed while the program is running. Each
value is given an index or key you can define to help identify each piece of data. This index
will not change if other rows of data are added or deleted, unlike lists where the position of
the items can change and therefore their index number will also change.

Don’t get yourself in a tangle, take each program
and break it into the parts you already know from
previous programs and build in the new skills you
are learning.

60

Challenges 69 - 79: Tuples, Lists and Dictionaries

Example Code
fruit_tuple = (“apple”,“banana”,“strawberry”,“orange”)
Creates a variable name called “fruit_tuple” which stores four pieces of fruit within it. The
round brackets define this group as a tuple and therefore the contents of this collection of
data cannot be altered while the program is running.

print(fruit_tuple.index(“strawberry”))
Displays the index (i.e. the numeric key) of the item “strawberry”. In this example it
will return the number 2 as Python starts counting the items from 0, not 1.

print(fruit_tuple[2])

names_list = [“John”,“Tim”,“Sam”]

Displays item 2 from
“fruit_tuple”, in this case
“strawberry”.

Creates a list of the names and stores them in the
variable “names_list”. The square brackets define
this group of data as a list and therefore the contents
can be altered while the program is running.

del names_list[1]
Deletes item 1 from
“names_list”. Remember
it starts counting from 0
and not 1. In this case it
will delete “Tim” from the
list.

names_list.sort()
Sorts name_list into
alphabetical order and
saves the list in the new
order. This does not work
if the list is storing data of
different types, such as
strings and numeric data
in the same list.

names_list.append(input(“Add a name: “))
Asks the user to enter a name and will add that to the end of
“names_list”.

print(sorted(names_list))
Displays names_list in alphabetical
order but does not change the order of
the original list, which is still saved in
the original order. This does not work
if the list is storing data of different
types, such as strings and numeric
data in the same list.

colours = {1:“red”,2:“blue”,3:“green”}
Creates a dictionary called “colours”, where each item is
assigned an index of your choosing. The first item in each
block is the index, separated by a colon and then the
colour.

colours[2] = “yellow”
Makes a change to the data stored in position 2 of the colours dictionary. In this case it will
change “blue” to “yellow”.

Challenges 69 - 79: Tuples, Lists and Dictionaries

61

As lists are one of the most common data structures we include more example code just for
lists.

x = [154,634,892,345,341,43]

print(len(x))

Here we have created a list that contains

Displays the length of the list
(i.e. how many items are in the
list).

numbers. Please note: as it contains numeric
data, no speech marks are required.

print(x[1:4])
This will display data in positions 1, 2 and 3. In
this case 634, 892 and 345. Remember, Python
starts counting from 0 and will stop when it gets
to the last position, without showing the final
value.

num = int(input(“Enter number: ”))
if num in x:
print(num,“is in the list”)
else:
print(“Not in the list”)
Asks the user to enter a number and checks
whether the number is in the list and displays an
appropriate message.

x.insert(2,420)

x.remove(892)

Inserts the number
420 into position 2 and
pushes everything
else along to make
space. This will
change the index
numbers of the items
in the list.

Deletes an item from
the list. This is useful
if you do not know the
index of that item. If
there is more than one
instance of the data it
will only delete the
first instance.

x.append(993)
Adds the number 993 to the end of the list.

for i in x:
print(i)
Uses the items in the list in a for
loop, useful if you want to print
the items in a list on separate
lines.

62

Challenges 69 - 79: Tuples, Lists and Dictionaries

Challenges
069
Create a tuple containing the names of five countries and display the whole tuple. Ask
the user to enter one of the countries that have been shown to them and then display
the index number (i.e. position in the list) of that item in the tuple.

070

071

Add to program 069 to ask the
user to enter a number and
display the country in that
position.

Create a list of two sports. Ask the
user what their favourite sport is and
add this to the end of the list. Sort the
list and display it.

072
Create a list of six school subjects. Ask the user which of these
subjects they don’t like. Delete the subject they have chosen from the
list before you display the list again.

073

074

075

Ask the user to
enter four of their
favourite foods
and store them in
a dictionary so
that they are
indexed with
numbers starting
from 1. Display
the dictionary in
full, showing the
index number
and the item. Ask
them which they
want to get rid of
and remove it
from the list. Sort
the remaining
data and display
the dictionary.

Enter a list of ten colours.
Ask the user for a starting
number between 0 and 4
and an end number
between 5 and 9. Display
the list for those colours
between the start and end
numbers the user input.

Create a list of four three-digit
numbers. Display the list to the
user, showing each item from
the list on a separate line. Ask
the user to enter a three-digit
number. If the number they
have typed in matches one in
the list, display the position of
that number in the list,
otherwise display the message
“That is not in the list”.

076
Ask the user to enter the names of three people they want to
invite to a party and store them in a list. After they have entered
all three names, ask them if they want to add another. If they do,
allow them to add more names until they answer “no”. When
they answer “no”, display how many people they have invited to
the party.

Challenges 69 - 79: Tuples, Lists and Dictionaries

63

077
Change program 076 so that once the user has completed their list of names, display the
full list and ask them to type in one of the names on the list. Display the position of that
name in the list. Ask the user if they still want that person to come to the party. If they
answer “no”, delete that entry from the list and display the list again.

078
You are over halfway
there. Keep going,
you have already
learnt so much.

Create a list containing the titles of
four TV programmes and display
them on separate lines. Ask the
user to enter another show and a
position they want it inserted into
the list. Display the list again,
showing all five TV programmes in
their new positions.

079
Create an empty list called “nums”.
Ask the user to enter numbers.
After each number is entered, add
it to the end of the nums list and
display the list. Once they have
entered three numbers, ask them if
they still want the last number they
entered saved. If they say “no”,
remove the last item from the list.
Display the list of numbers.

64

Challenges 69 - 79: Tuples, Lists and Dictionaries

Answers
069

070

071

072

073

Challenges 69 - 79: Tuples, Lists and Dictionaries

074

075

076

077

078

65

66
079

Challenges 69 - 79: Tuples, Lists and Dictionaries

Challenges 80 - 87: More String Manipulation

67

Challenges 80 - 87

More String
Manipulation
Explanation
A string is the technical name for a group of characters that you do not need to perform
calculations with. “Hello” would be an example of a string, as would “7B”.
Here we have a variable called name which is assigned the value “Simon”.

“Simon” can be thought of as a sequence of individual characters and each character in
that string can be identified by its index.
Index

0

1

2

3

4

Value S i m o n

Note how strings start indexing from 0 and not 1, just as lists do. If the string had a space in
it, the space would also be counted as a character, as would any punctuation in the string.
Index

0

1

2

3

4

Value H e l l o

5

6

7

8

9

10

11

W

o r l

d

!

Now you are familiar with dealing with lists, strings should hold no problems for you as they
use the same methods you have used with lists. However, I have included some additional
code which may prove useful.

68

Challenges 80 - 87: More String Manipulation

Example Code
Please note: in the examples below, “msg” is a variable name containing a string.

if msg.isupper():
print(“Uppercase”)
else:
print(“This is not in uppercase”)
If the message is in uppercase it will display the message
“Uppercase”, otherwise it will display the message “This
is not in uppercase”.

msg.islower()
Can be used in place of
the isupper () function
to check if the variable
contains lower case
letters.

msg=”Hello”
for letter in msg:
print(letter,end=”*”)
Displays the message, and between each character it will display a “*”.
The output in this example will be: H*e*l*l*o*

Remember, you can always
look back on previous
programs to remind
yourself of the skills learnt
earlier.

Challenges 80 - 87: More String Manipulation

69

Challenges
080

081

Ask the user to enter their
first name and then display
the length of their first name.
Then ask for their surname
and display the length of
their surname. Join their first
name and surname together
with a space between and
display the result. Finally,
display the length of their full
name (including the space).

Ask the user to type in their favourite school subject.
Display it with “-” after each letter, e.g. S-p-a-n-i-s-h-.

084

082
Show the user a line of text from your favourite poem
and ask for a starting and ending point. Display the
characters between those two points.

083
Ask the user to type in a word in upper case. If they
type it in lower case, ask them to try again. Keep
repeating this until they type in a message all in
uppercase.

Ask the user to type in their
postcode. Display the first
two letters in uppercase.

085

086

Ask the user to type in their name
and then tell them how many vowels
are in their name.

Ask the user to enter a new password. Ask
them to enter it again. If the two passwords
match, display “Thank you”. If the letters are
correct but in the wrong case, display the
message “They must be in the same case”,
otherwise display the message “Incorrect”.

087
Ask the user to type in a word and then
display it backwards on separate lines. For
instance, if they type in “Hello” it should
display as shown below:

70

Challenges 80 - 87: More String Manipulation

Answers
080

081

082

083

084

Challenges 80 - 87: More String Manipulation

085

086

087

71

72

Challenges 88 - 95: Numeric Arrays

Challenges 88 - 95

Numeric Arrays
Explanation
Earlier in the book we looked at lists (see page 58). Lists can store a jumble of different types
of data at the same time, including strings and numbers. Python arrays are similar to
lists, but they are only used to store numbers. Numbers can have varying ranges, but
in an array all pieces of data in that array must have the same data type, as outlined
in the table below.
Type code

Common name

Description

Size in bytes

'i'

Integer

Whole number between -32,768 and 32,767

2

'l'

Long

Whole number between -2,147,483,648 and
2,147,483,647

4

'f'

'd'

Allows decimal places with numbers ranging
from -1038 to 1038 (i.e. allows up to 38 numeric
Floating-point
characters including a single decimal point
anywhere in that number and can be negative or
positive value)
Double

Allows decimal places with numbers ranging
from -10308 to 10308

4

8

When you create your array you need to define the type of data it will contain. You cannot
alter or change this while the program is running. Therefore, if you define an array as an 'i'
type (this allows whole numbers between the values −32,768 and 32,767) you cannot add a
decimal point to a number in that array later as it will cause an error message and crash the
program.
Please note: Other programming languages use the term array to
allow the storage of any data type, but in Python arrays only store numbers whereas lists
allow the storage of any data type. If you want to create a variable that stores multiple
strings, in Python you need to create a list rather than an array.

Challenges 88 - 95: Numeric Arrays

73

Example Code
from array import *
This needs to be the first line of your program so that
Python can use the array library.

nums = array (‘i',[45,324,654,45,264])
print(nums)
Creates an array called “nums”. It uses the integer data type and has five items in the
array. It will display the following as the output:

array('i', [45, 324, 654, 45, 264])
for x in nums:
print(x)

newValue = int(input(“Enter number: “))
nums.append(newValue)

Displays the array with
each item appearing on
a separate line.

Asks the user to enter a new number which it will add to
the end of the existing array.

nums.reverse()
Reverses the order of
the array.

nums = sorted(nums)

nums.pop()

Sorts the array into
ascending order.

This will remove the last
item from the array.

newArray = array(‘i’,[])
more = int(input(“How many items: ”))
for y in range(0,more):
newValue=int(input(“Enter num: ”))
newArray.append(newValue)
nums.extend(newArray)
Creates a blank array called “newArray” which uses the
integer data type. It asks the user how many items they
want to add and then appends these new items to
newArray. After all the items have been added it will join
together the contents of newArray and the nums array.

getRid = int(input(“Enter item index: ”))
nums.remove(getRid)
Asks the user to enter the item they want to get rid of and then removes the first item
that matches that value from the array.

print(nums.count(45))
This will display how many times the value “45” appears in the array.

74

Challenges 88 - 95: Numeric Arrays

Challenges
088

089

Ask the user for a list of five
integers. Store them in an array.
Sort the list and display it in
reverse order.

Create an array which will store a list of integers.
Generate five random numbers and store them in
the array. Display the array (showing each item on
a separate line).

090

091

Ask the user to enter numbers. If they enter a
number between 10 and 20, save it in the array,
otherwise display the message “Outside the
range”. Once five numbers have been
successfully added, display the message “Thank
you” and display the array with each item shown
on a separate line.

Create an array which contains
five numbers (two of which
should be repeated). Display
the whole array to the user. Ask
the user to enter one of the
numbers from the array and
then display a message saying
how many times that number
appears in the list.

Keep
going!

092
Create two arrays (one
containing three numbers that
the user enters and one
containing a set of five random
numbers). Join these two arrays
together into one large array.
Sort this large array and display
it so that each number appears
on a separate line.

093
Ask the user to enter five
numbers. Sort them into order
and present them to the user.
Ask them to select one of the
numbers. Remove it from the
original array and save it in a
new array.

094

095

Display an array of five
numbers. Ask the user to
select one of the numbers.
Once they have selected a
number, display the
position of that item in the
array. If they enter
something that is not in
the array, ask them to try
again until they select a
relevant item.

Create an array of five numbers
between 10 and 100 which each have
two decimal places. Ask the user to
enter a whole number between 2 and 5.
If they enter something outside of that
range, display a suitable error message
and ask them to try again until they
enter a valid amount. Divide each of the
numbers in the array by the number the
user entered and display the answers
shown to two decimal places.

Challenges 88 - 95: Numeric Arrays

Answers
088

089

090

75

76
091

092

Challenges 88 - 95: Numeric Arrays

Challenges 88 - 95: Numeric Arrays

093

094

77

78
095

Challenges 88 - 95: Numeric Arrays

Challenges 96 - 103: 2D Lists and Dictionaries

79

Challenges 96 - 103

2D Lists and
Dictionaries
Explanation
Technically it is possible to create a two-dimensional array in Python, but as Python arrays
are limited to storing numbers and most Python programmers feel more comfortable with
working with lists, 2D arrays are rarely used and 2D lists are far more common.
Imagine, for one terrifying moment, you are a teacher. Scary I know! Also
imagine you have four students and you teach those same students across
three different subjects. You may, if you are a conscientious teacher, need to
keep records of those students’ grades for each of their subjects. It is possible to create a
simple chart on paper to do this as follows:
Maths

English

French

Susan

45

37

54

Peter

62

58

59

Mark

49

47

60

Andy

78

83

62

80

Challenges 96 - 103: 2D Lists and Dictionaries

Two-dimensional lists work in a similar way.
0

1

2

0

45

37

54

1

62

58

59

2

49

47

60

3

78

83

62

In Python, this two-dimensional list would be coded as follows:

Alternatively, if you do not want to use the standard Python column index numbers you can
use a dictionary as follows:

This program will produce the output 37 (the English grade for the pupil with the index
number 0) and can make the data easier to understand.
You can even go further and add a row index as follows:

This will give the output 58, the grade for Peter’s English exam.

Challenges 96 - 103: 2D Lists and Dictionaries

81

Example Code
simple_array = [[2,5,8],[3,7,4],[1,6,9]]
Creates a 2D list (as shown on the right) which uses
standard Python indexing for the rows and columns.

print(simple_array)

print(simple_array[1])

Displays all the data in the 2D
list.

Displays data from row 1, in this case
[3, 7, 4].

simple_array[2][1]= 5

print(simple_array[1][2])

Changes the data in row 2,
column 1 to the value 5.

Displays data from row 1, column 2, in
this case 4.

simple_array[1].append(3)
Adds the value 3 onto the end of the data in
row 1 so in this case it becomes [3, 7, 4, 3].

data_set = {“A”:{“x”:54,“y”:82,“z”:91},“B”:{“x”:75,“y”:29,“z”:80}}
Creates a 2D dictionary using user-defined labels for the rows and columns (as shown
above).

print(data_set[“A”])

print(data_set[“B”][“y”])

Displays data from data set “A”.

Displays data from row “B”, column “y”.

for i in data_set:
print(data_set [i][“y”])

data_set[“B”][“y”] = 53
Changes the data in “B”, “y”, to 53.

Displays the “y” column from each row.

grades[name]={“Maths”:mscore,“English”:escore}
Adds another row of data to a 2D dictionary. In this case, name would be the row index
and Maths and English would be the column indexes.

for name in grades:
print((name),grades[name][“English”])
Displays only the name and the English grade for each
student.

del list[getRid]
Removes a selected
item.

82

Challenges 96 - 103: 2D Lists and Dictionaries

Challenges
096

097
7

Create the following using a
simple 2D list using the
standard Python indexing:

Using the 2D list from program 096, ask the user to
select a row and a column and display that value.

098
8

099
9
Change your previous program
to ask the user which row they
want displayed. Display that
row. Ask which column in that
row they want displayed and
display the value that is held
there. Ask the user if they want
to change the value. If they do,
ask for a new value and change
the data. Finally, display the
whole row again.

Using the 2D list from program 096, ask the user
which row they would like displayed and display
just that row. Ask them to enter a new value and
add it to the end of the row and display the row
again.

100
Create the following using a 2D dictionary showing
the sales each person has made in the different
geographical regions:

101
Using program 100, ask the user for a name and a region. Display the relevant data. Ask
the user for the name and region of data they want to change and allow them to make
the alteration to the sales figure. Display the sales for all regions for the name they
choose.

102

103

Ask the user to enter the name, age and shoe size for four
people. Ask for the name of one of the people in the list and
display their age and shoe size.

Adapt program 102
to display the
names and ages of
all the people in
the list but do not
show their shoe
size.

10
04
After gathering the four names, ages and shoe sizes, ask the
user to enter the name of the person they want to remove from
the list. Delete this row from the data and display the other rows
on separate lines.

Challenges 96 - 103: 2D Lists and Dictionaries

83

Answers
096
097

098

099

100
Please note the data has been split onto separate rows to make it easier to read the code.
This is possible, as long as the breaks are where the rows will natural break and are
contained within the curly brackets.

84
101

102

103

Challenges 96 - 103: 2D Lists and Dictionaries

Challenges 96 - 103: 2D Lists and Dictionaries

104

85

86

Challenges 105 - 110: Reading and Writing to a Text File

Challenges 105 - 110

Reading and Writing
to a Text File
Explanation
It is all very well being able to define a list, make changes and add new data, but if the next
time the program is run it returns to the original data and your changes are lost then it is
not a lot of use. Therefore, it is sometimes necessary to save data outside of the program
and this way the data can be stored, along with any changes that are made.
The easiest place to start learning about writing and reading from an external
file is with a text file.
When opening an external file you must specify how that file will be used within the
program. The options are below.

Code
w
r
a

Description
Write mode: used to create a new file. Any existing files
with the same name will be erased and a new one
created in its place.
Read mode: used when an existing file is only being
read and not being written to.
Append mode: used to add new data to the end of the
file.

Text files are only used to write, read and append data. By the very nature of how they work
it is not easy to remove or alter individual elements of data once it is written to the file,
unless you want to overwrite the entire file or create a new file to store the new
data. If you want to be able to alter the individual elements once the file has
been created it is better to use a .csv file (see page 91) or an SQL database (see
page 134).

Challenges 105 - 110: Reading and Writing to a Text File

87

Example Code
file = open(“Countries.txt”,“w”)
file.write(“Italy\n”)
file.write(“Germany\n”)
file.write(“Spain\n”)
file.close()
Creates a file called “Countries.txt”. If one already exists then it will be overwritten with
a new blank file. It will add three lines of data to the file (the \n forces a new line after
each entry). It will then close the file, allowing the changes to the text file to be saved.

file = open(“Countries.txt”,“r”)
print(file.read())
This will open the Countries.txt file in “read”
mode and display the entire file.

file = open(“Countries.txt”,“a”)
file.write(“France\n”)
file.close()
This will open the Countries.txt file in “append”
mode, add another line and then close the file.
If the file.close() line is not included, the
changes will not be saved to the text file.

88

Challenges 105 - 110: Reading and Writing to a Text File

Challenges
105

106

Write a new file
called
“Numbers.txt”.
Add five numbers
to the document
which are stored
on the same line
and only
separated by a
comma. Once you
have run the
program, look in
the location where
your program is
stored and you
should see that
the file has been
created. The
easiest way to
view the contents
of the new text file
on a Windows
system is to read it
using Notepad.

Create a new file called “Names.txt”. Add five names to the
document, which are stored on separate lines. Once you have
run the program, look in the location where your program is
stored and check that the file has been created properly.

107

108

Open the
Names.txt
file and
display
the data
in Python.

Open the Names.txt file. Ask the user to input a
new name. Add this to the end of the file and
display the entire file.

110
Using the Names.txt file you
created earlier, display the list of
names in Python. Ask the user to
type in one of the names and then
save all the names except the one
they entered into a new file called
Names2.txt.

109
Display the following menu to the user:

Ask the user to enter 1, 2 or 3. If they select
anything other than 1, 2 or 3 it should display a
suitable error message.
If they select 1, ask the user to enter a school
subject and save it to a new file called
“Subject.txt”. It should overwrite any existing file
with a new file.
If they select 2, display the contents of the
“Subject.txt” file.
If they select 3, ask the user to enter a new
subject and save it to the file and then display
the entire contents of the file.
Run the program several times to test the
options.
Fantastic work, saving data to
external files is an important
programming skill.

Challenges 105 - 110: Reading and Writing to a Text File

Answers
105

106

107

108

89

90
109

110

Challenges 105 - 110: Reading and Writing to a Text File

Challenges 111 - 117: Reading and Writing to a .csv File

91

Challenges 111 - 117

Reading and Writing
to a .csv File
Explanation
CSV stands for Comma Separated Values and is a format usually associated with importing
and exporting from spreadsheets and databases. It allows greater control over the data
than a simple text file, as each row is split up into identifiable columns. Below is an
example of data you may want to store.
Name
Brian
Sandra
Zoe
Keith

Age
73
48
25
43

Star sign
Taurus
Virgo
Scorpio
Leo

A .csv file would store the above data as follows:

However, it may be easier to think of it as being separated into columns and rows that use
an index number to identify them.

92

Challenges 111 - 117: Reading and Writing to a .csv File

When opening a .csv file to use, you must specify how that file will be used. The options
are:

Code
w

x
r
a

Description
Creates a new file and writes to that file. If the file
already exists, a new file will be created, overwriting
the existing file.
Creates a new file and writes to that file. If the file
already exists, the program will crash rather than
overwrite it.
Opens for reading only and will not allow you to make
changes.
Opens for writing, appending to the end of the file.

Challenges 111 - 117: Reading and Writing to a .csv File

93

Example Code
import csv
This must be at
the top of your
program to allow
Python to use the
.csv library of
commands.

file = open (“Stars.csv”,“w”)
newRecord = “Brian,73,Taurus\n”
file.write(str(newRecord))
file.close()
This will create a new file called “Stars.csv”, overwriting any
previous files of the same name. It will add a new record and
then close and save the changes to the file.

file = open (“Stars.csv”,“a”)
name = input(“Enter name: ”)
age = input(“Enter age: ”)
star = input(“Enter star sign: ”)
newRecord = name + “,” + age + “,” + star + “\n”
file.write(str(newRecord))
file.close()
This will open the Stars.csv file, ask the user to enter the name, age
and star sign, and will append this to the end of the file.

file = open(“Stars.csv”,“r”)
for row in file:
print(row)
This will open the Stars.csv file in read
mode and display the records one row at
a time.

file = open(“Stars.csv”,“r”)
reader = csv.reader(file)
rows = list(reader)
print(rows[1])
This will open the Stars.csv file and
display only row 1. Remember, Python
starts counting from 0.

file = open (“Stars.csv”,“r”)
search = input(“Enter the data you are searching for: ”)
reader = csv.reader(file)
for row in file:
if search in str(row):
print(row)
Asks the user to enter the data they are searching for. It will display all rows that contain
that data anywhere in that row.

94

Challenges 111 - 117: Reading and Writing to a .csv File

import csv
file = list(csv.reader(open(“Stars.csv”)))
tmp = []
for row in file:
tmp.append(row)
A .csv file cannot be altered, only added to. If you need to alter the file you need to
write it to a temporary list. This block of code will read the original .csv file and write it
to a list called “tmp”. This can then be used and altered as a list (see page 58).

file = open(“NewStars.csv”,“w”)
x = 0
for row in tmp:
newRec = tmp[x][0] + ”,” + tmp[x][1] + ”,” + tmp[x][2] + ”\n”
file.write(newRec)
x = x + 1
file.close()
Writes from a list into a new .csv file called “NewStars.csv”.

Challenges 111 - 117: Reading and Writing to a .csv File

95

Challenges
111
Create a .csv file that will store the following data. Call it “Books.csv”.

0
1
2
3
4

Book
To Kill A Mockingbird
A Brief History of Time
The Great Gatsby
The Man Who Mistook His Wife for a Hat
Pride and Prejudice

Author
Harper Lee
Stephen Hawking
F. Scott Fitzgerald
Oliver Sacks
Jane Austen

Year Released
1960
1988
1922
1985
1813

112

113

Using the Books.csv file
from program 111, ask
the user to enter another
record and add it to the
end of the file. Display
each row of the .csv file
on a separate line.

Using the Books.csv file, ask the user how many records
they want to add to the list and then allow them to add
that many. After all the data has been added, ask for an
author and display all the books in the list by that author.
If there are no books by that author in the list, display a
suitable message.

114

115

Using the Books.csv file, ask the user
to enter a starting year and an end
year. Display all books released
between those two years.

Using the Books.csv file, display the data in
the file along with the row number of each.

116
Import the data from the Books.csv file into a list. Display the
list to the user. Ask them to select which row from the list
they want to delete and remove it from the list. Ask the user
which data they want to change and allow them to change it.
Write the data back to the original .csv file, overwriting the
existing data with the amended data.

117
Create a simple maths quiz that will ask the user for their name and then generate two
random questions. Store their name, the questions they were asked, their answers and
their final score in a .csv file. Whenever the program is run it should add to the .csv file
and not overwrite anything.

96

Challenges 111 - 117: Reading and Writing to a .csv File

Answers
111

112

Challenges 111 - 117: Reading and Writing to a .csv File

113

114

115

97

98
116

117

Challenges 111 - 117: Reading and Writing to a .csv File

Challenges 118 - 123: Subprograms

99

Challenges 118 - 123

Subprograms
Explanation
Subprograms are blocks of code which perform specific
tasks and can be called upon at any time in the program to
run that code.

Advantages
x You can write a block of code and it can be used and reused at different times during the program.
x It makes the program simpler to understand as the code
is grouped together into chunks.

Defining a subprogram and passing variables
between subprograms
Below is a simple program that we would normally create
without subprograms but have written it with subprograms
so you can see how they work:

This program uses three subprograms get_name(), print_Msg() and main().
The get_name() subprogram will ask the user to input their name and then it will return
the value of the variable “user_name” so that it can be used in another subprogram. This is
very important. If you do not return the values, then the values of any variables that were
created or altered in that subprogram cannot be used elsewhere in your program.

100

Challenges 118 - 123: Subprograms

The print_Msg() subprogram will display the message “Hello” and then the user name.
The variable “user_name” appears in the brackets as the current value of the variable is
being imported into the subprogram so it can be used.
The main() subprogram will get the user_name from the get_name() subprogram
(using the variable user_name) as this was returned from the get_name() subprogram. It
will then use that user_name variable in the print_Msg() subprogram.
The last line “main()” is the actual program itself. All this will do is start the main()
subprogram running.
Obviously, there is no need to create such a convoluted way of performing what is in fact a
very simple program, but this is only used as an example of how subprograms are laid out
and variables can be used and passed between the subprograms.
Please note: Python does not like surprises, so if you are going
to use a subprogram in a program, Python must have read the
“def subprogram_name()” line before so it knows where to
go to find it. If you try to refer to a subprogram before Python has
read about it, it panics and will crash. When calling a
subprogram, the subprogram must be written above the section
of code you use to call it. Python will read from the top down and run the first line it comes
across that has not been indented and does not start with the word def. In the program
above this would be main().

Remember: never surprise Python as it
will not like it - good advice for life
generally.

Challenges 118 - 123: Subprograms

101

Example Code
The following examples are all part of the same program and would be displayed in the
order shown here.

def get_data():
user_name = input(“Enter your name: ”)
user_age = int(input(“Enter your age: ”))
data_tuple = (user_name, user_age)
return data_tuple
Defines a subprogram called “get_data()” which will ask the user for their name and
age. As we want to send more than one piece of data back to the main program for other
parts of the program to use, we have combined them together. The return line can only
return a single value, which is why we combined the user_name and user_age variables
into a tuple (see page 58) called data_tuple.

def message(user_name,user_age):
if user_age <= 10:
print(“Hi”, user_name)
else:
print(“Hello”, user_name)
Defines a subprogram called message() which uses two variables that have previously
been defined (user_name and user_age).

def main():
user_name,user_age = get_data()
message(user_name,user_age)
Defines a subprogram called main() which obtains the
two variables from the get_data() subprogram. These
must be labelled in the same order as they were
defined in the tuple. It then calls the message()
subprogram to run with the two variables.

main()
Runs the main() subprogram.

102

Challenges 118 - 123: Subprograms

Challenges
118

119

Define a subprogram that will ask the user to
enter a number and save it as the variable
“num”. Define another subprogram that will
use “num” and count from 1 to that number.

Define a subprogram
that will ask the user to
pick a low and a high
number, and then
generate a random
number between those
two values and store it in
a variable called
“comp_num”.

120
Display the following menu to the user:

If they enter a 1, it should run a subprogram that will
generate two random numbers between 5 and 20, and
ask the user to add them together. Work out the correct
answer and return both the user’s answer and the
correct answer.
If they entered 2 as their selection on the menu, it
should run a subprogram that will generate one number
between 25 and 50 and another number between 1 and
25 and ask them to work out num1 minus num2. This
way they will not have to worry about negative answers.
Return both the user’s answer and the correct answer.
Create another subprogram that will check if the user’s
answer matches the actual answer. If it does, display
“Correct”, otherwise display a message that will say
“Incorrect, the answer is” and display the real answer.
If they do not select a relevant option on the first menu
you should display a suitable message.

Define another
subprogram that will
give the instruction “I am
thinking of a number…”
and then ask the user to
guess the number they
are thinking of.
Define a third
subprogram that will
check to see if the
comp_num is the same
as the user’s guess. If it
is, it should display the
message “Correct, you
win”, otherwise it should
keep looping, telling the
user if they are too low or
too high and asking them
to guess again until they
guess correctly.

121
Create a program that will allow the user to easily manage a list of names. You should
display a menu that will allow them to add a name to the list, change a name in the
list, delete a name from the list or view all the names in the list. There should also be a
menu option to allow the user to end the program. If they select an option that is not
relevant, then it should display a suitable message. After they have made a selection
to either add a name, change a name, delete a name or view all the names, they
should see the menu again without having to restart the program. The program
should be made as easy to use as possible.

Challenges 118 - 123: Subprograms

122

103

Including menus
helps make the
program easier to

Create the following menu:

If the user selects 1, allow them to add to a file
called Salaries.csv which will store their name
and salary. If they select 2 it should display all
records in the Salaries.csv file. If they select 3 it
should stop the program. If they select an
incorrect option they should see an error
message. They should keep returning to the
menu until they select option 3.

123
In Python, it is not technically possible to directly
delete a record from a .csv file. Instead you need
to save the file to a temporary list in Python,
make the changes to the list and then overwrite
the original file with the temporary list.
Change the previous program to allow you to do
this. Your menu should now look like this:

104

Challenges 118 - 123: Subprograms

Answers
118

Challenges 118 - 123: Subprograms

119

105

106
120

Challenges 118 - 123: Subprograms

Challenges 118 - 123: Subprograms

121

107

108
122

Challenges 118 - 123: Subprograms

Challenges 118 - 123: Subprograms

123

109

110

Challenges 124 - 132: Tkinter GUI

Challenges 124 - 132

Tkinter GUI
Graphical User Interface
Explanation
A GUI (graphical user interface) makes the program easier to use. It allows you, as the
programmer, to create screens, text boxes and buttons to help the user navigate through
the program in a more user-friendly way. Tkinter is a library of features in Python that
allows you to do this.
Look at the code below and in particular the measurements that are used in the
window.geometry and button.place lines.

Now look at the window that this code will produce:

The geometry line in the code determines the size of the window and the place line in
the code determines the position of the individual item on the window.

Challenges 124 - 132: Tkinter GUI

111

Once the button is pressed it will run the “Call” subprogram and change the window to look
as follows:

112

Challenges 124 - 132: Tkinter GUI

Example Code
from tkinter import *
This line must go at the beginning of the program to import the Tkinter library.

window = Tk()
window.title(“Window Title”)
window.geometry(“450x100”)
Creates a window that will act as the
display, referred to as “window”, adds a title
and defines the size of the window.

label = Label(text = “Enter number:”)
Adds text to the screen displaying the message
shown.

entry_box = Entry (text = 0)
Creates a blank entry box. Entry boxes can be used by
the user to input data or used to display output.

output_box = Message(text = 0)
Creates a message box which is used to display an
output.

output_box [“bg”] = “red”

output_box [“fg”] = “white”

Specifies the background colour of the
object.

Specifies the font colour of the object.

output_box [“relief”] = “sunken”

list_box = Listbox()

Specifies the style of the box. This can be flat,
raised, sunken, grooved and ridged.

Creates a drop-down list box
which can only contain strings.

entry_box [“justify”] = “center”
Specifies the justification of the text in an entry box,
but this does not work for message boxes.

button1 = Button(text = “Click here”, command = click)
Creates a button that will run the subprogram “click”.

Challenges 124 - 132: Tkinter GUI

113

label.place(x = 50, y = 20, width = 100, height = 25)
Specifies the position in which the object will appear in the window. If the position is
not specified the item will not appear in the window.

entry_box.delete(0, END)
Deletes the contents of an entry or
list box.

num = entry_box.get()
Saves the contents of an entry box and stores it
in a variable called num. This does not work
with message boxes.

answer = output_txt[“text”]
Obtains the contents of a message box and
stores it in a variable called answer. This does
not work with an entry box.

output_txt[“text”] = total
Changes the content of a message box to
display the value of the variable total.

window.mainloop()
This must be at the end of the program to make
sure it keeps working.

Every challenge you
complete helps you
become a better
programmer.

114

Challenges 124 - 132: Tkinter GUI

Challenges
124

125

126

Create a window that will
ask the user to enter their
name. When they click on
a button it should display
the message “Hello” and
their name and change
the background colour
and font colour of the
message box.

Write a program that
can be used instead
of rolling a six-sided
die in a board game.
When the user clicks
a button it should
display a random
whole number
between 1 to 6
(inclusive).

Create a program that will ask
the user to enter a number in a
box. When they click on a
button it will add that number
to a total and display it in
another box. This can be
repeated as many times as
they want and keep adding to
the total. There should be
another button that resets the
total back to 0 and empties the
original text box, ready for
them to start again.

127
Create a window that will ask the user to enter a
name in a text box. When they click on a button it
will add it to the end of the list that is displayed on
the screen. Create another button which will clear
the list.

129
Create a window that will ask the
user to enter a number in a text box.
When they click on a button it will
use the code
variable.isdigit() to check
to see if it is a whole number. If it is
a whole number, add it to a list box,
otherwise clear the entry box. Add
another button that will clear the
list.

128
1 kilometre = 0.6214 miles and 1
mile = 1.6093 kilometres. Using
these figures, make a program
that will allow the user to
convert between miles and
kilometres.

130
Alter program 129 to add a third button that
will save the list to a .csv file. The code

tmp_list = num_list.get(0,END)
can be used to save the contents of a list box
as a tuple called tmp_list.

131

132

Create a program that will allow the
user to create a new .csv file. It should
ask them to enter the name and age of
a person and then allow them to add
this to the end of the file they have
just created.

Using the .csv file you created for the last
challenge, create a program that will allow
people to add names and ages to the list
and create a button that will display the
contents of the .csv file by importing it to a
list box.

Challenges 124 - 132: Tkinter GUI

Answers
124

115

116
125

Challenges 124 - 132: Tkinter GUI

Challenges 124 - 132: Tkinter GUI

126

117

118
127

Challenges 124 - 132: Tkinter GUI

Challenges 124 - 132: Tkinter GUI

128

119

120
129

Challenges 124 - 132: Tkinter GUI

Challenges 124 - 132: Tkinter GUI

130

121

122

131

Challenges 124 - 132: Tkinter GUI

Challenges 124 - 132: Tkinter GUI

132

123

124

Challenges 133 - 138: More Tkinter

Challenges 133 - 138

More Tkinter
Explanation
Here we will look at creating a GUI which includes more features and builds on the
knowledge from the previous chapter.

On this screen we have:
x changed the icon on the title bar;
x

You’re creating some
great programs.

changed the background colour of the main window;

x added a static image of the logo to the top left, which will not
change;
x created a label which, at the moment, displays “Hello”;
x added a Click Me button;
x added a drop-down option entitled Select Name, which will display
three names; “Bob”, “Sue” and “Tim” to the user;
x added a second image in the lower half of the window which will
change to show the photograph of the person selected from the
drop-down list when the user clicks on the Click Me button.

Challenges 133 - 138: More Tkinter

125

All the code to create this window can be created using the code we looked at in the
previous section and the example code you will be looking at in this chapter.
When using images in your program, it is easier if they are stored in the same folder as the
program. Otherwise you need to include the entire dictionary location of the file as follows:

If you store the image in the same folder as the program you only need to include the file
name as shown below:

Please note: it is only possible to use GIF or PGM/PPM file types for images in Tkinter as
other file types are not supported. Make sure your images are saved in a suitable format
and with a suitable name in the correct location before you start creating the programs, if at
all possible, to make your life simpler.

126

Challenges 133 - 138: More Tkinter

Example Code
window.wm_iconbitmap(“MyIcon.ico”)
Changes the icon displayed in the title of the window.

window.configure(background = “light green”)
Changes the background colour of the window, in this case to light green.

logo = PhotoImage(file = “logo.gif”)
logoimage = Label(image = logo)
logoimage.place(x = 30, y = 20, width = 200, height = 120)
Displays an image in a label widget. This image will not change while the program is
running.

photo = PhotoImage(file = “logo.gif”)
photobox = Label(window, image = photo)
photobox.image = photo
photobox.place(x = 30, y = 20, width = 200, height = 120)
This is similar to the block above but as we want the image to change as we update the
data we need to add the code photobox.image = photo, which makes it
updatable.

selectName = StringVar(window)
selectName.set(“Select Name”)
namesList = OptionMenu(window,selectName,“Bob”,“Sue”,“Tim”)
namesList.place(x = 30, y = 250)
Creates a variable called selectName which will store a string where the original
value of the variable is “Select Name”. It will then create a drop-down option menu
which stores the value the user selects in the selectName variable and displays the
values in the list: Bob, Sue and Tim.

Challenges 133 - 138: More Tkinter

127

def clicked():
sel = selectName.get()
mesg = “Hello “ + sel
mlabel[“text”] = mesg
if sel == “Bob”:
photo = PhotoImage(file = “Bob.gif”)
photobox.image = photo
elif sel == “Sue”:
photo = PhotoImage(file = “Sue.gif”)
photobox.image = photo
elif sel == “Tim”:
photo = PhotoImage(file = “Tim.gif”)
photobox.image = photo
else:
photo = PhotoImage(file = “logo.gif”)
photobox.image = photo
photobox[“image”] = photo
photobox.update()
In this example, when a button is clicked it will run the “clicked” subprogram. This will
obtain the value from the selectName variable and create a message that will be
displayed in a label. It will then check to see which option has been selected and
change the picture to the correct image, which is displayed in the photo variable. If no
name is selected it will simply show the logo.

Don’t forget, if you
get stuck, look at
some of your earlier
programs, they may
help you.

128

Challenges 133 - 138: More Tkinter

Challenges
133

134

Create your own icon that consists of several
vertical multi-coloured lines. Create a logo
which measures 200 x 150, using Paint or
another graphics package. Create the
following window using your own icon and
logo.

Create a new program that will
generate two random whole numbers
between 10 and 50. It should ask the
user to add the numbers together and
type in the answer. If they get the
question correct, display a suitable
image such as a tick; if they get the
answer wrong, display another
suitable image such as a cross. They
should click on a Next button to get
another question.

135

When the user enters their name and clicks
on the Press Me button it should display
“Hello” and their name in the second text
box.

136
Create a program that will ask the user to
enter a name and then select the gender for
that person from a drop-down list. It should
then add the name and the gender
(separated by a comma) to a list box when
the user clicks on a button.

Create a simple program that shows a
drop-down list containing several
colours and a Click Me button. When
the user selects a colour from the list
and clicks the button it should
change the background of the
window to that colour. For an extra
challenge, try to avoid using an if
statement to do this.

137
Change program 136 so that when a
new name and gender is added to the
list box it is also written to a text file.
Add another button that will display
the entire text file in the main Python
shell window.

138
8
Save several images in the same folder as your
program and call them 1.gif, 2.gif, 3.gif, etc. Make
sure they are all .gif files. Display one in a window
and ask the user to enter a number. It should then
use that number to choose the correct file name and
display the correct image.

Challenges 133 - 138: More Tkinter

Answers
133

129

130
134

Challenges 133 - 138: More Tkinter

Challenges 133 - 138: More Tkinter

135

136

131

132
137

Challenges 133 - 138: More Tkinter

Challenges 133 - 138: More Tkinter

138

133

134

Challenges 139 - 145: SQLite

Challenges 139 - 145

SQLite
Explanation
SQL stands for “Structured Query Language” and is the main language that the large
database packages use. SQLite is free software that can be used as an SQL database. You
can download the latest version of the software from www.sqlite.org.

From the download page you need to select one of the “Precompiled Binaries” options for
either Mac OS or Windows that includes the “command-line-shell”.

To use SQL you need to load the “DB Browser for SQLite” which you can download from
https://sqlitebrowser.org.

Challenges 139 - 145: SQLite

135

Understanding a Relational
Database
We will use the example of a small manufacturing company that stores the details of their
employees in an SQL database.
Below is an example of the Employees table, which contains the details of all the employees
in the company. The contents of a table can be viewed by clicking on the Browse Data tab.

It has four fields (ID, Name, Dept and Salary) and 10
records in it (one for each employee). Take a look at
the employees list and you will notice that more
than one employee is listed in the same department.
In most databases you would find repetitive data
such as this. To make the database work more
efficiently the repeated data are often stored in a
separate table. In this case there is a department
table which would store all the information about
each department to save having to repeat all the
department details for each employee.

136

Challenges 139 - 145: SQLite

Here we can see the Departments table holding the details about each department. We
have simplified it and only include one piece of data for each department (in this case the
manager’s name) but it will still save having to input the manager’s name on every record,
which we would have to do if the data were all being saved in one large table.
By splitting the data into two tables like this, if we need to update the manager it only needs
to be updated in one place rather than updating it several times, which we would need to
do if it was all stored in a single table.
This is known as a one-to-many relationship as one department can have many
employees in it.
A primary key is the field (usually the first one) in each table that
stores the unique identifier for that record. Therefore, in the Employees
table the primary key will be the ID column and in the Department table
the primary key will be Dept.
When creating a table, you need to identify the following for each field:
x the name of the field (field names cannot contain spaces and must follow the same
rules as variable names);
x if it is a primary key;
x the data type for that field.
The data types you can use are as follows:
x integer: the value is an integer value;
x real: the value is a floating-point value;
x text: the value is a text string;
x blob: the value is stored exactly as it was input.
You can also specify if the field cannot be left blank by adding NOT NULL to the end of the
field when you create it.

Challenges 139 - 145: SQLite

137

Example Code
import sqlite3
This must be the first
line of the program to
allow Python to use
the SQLite3 library.

with sqlite3.connect(“company.db”) as db:
cursor=db.cursor()
Connects to the company database. If no such database
exists, it will create one. The file will be stored in the same
folder as the program.

cursor.execute(“““CREATE TABLE IF NOT EXISTS employees(
id integer PRIMARY KEY,
name text NOT NULL,
dept text NOT NULL,
salary integer);”””)
Creates a table called employees which has four fields (id, name, dept and salary). It
specifies the data type for each field, defines which field is the primary key and which
fields cannot be left blank. The triple speech marks allow the code to be split over
several lines to make it easier to read rather than having it all displayed in one line.

cursor.execute(“““INSERT INTO employees(id,name,dept,salary)
VALUES(“1”,”Bob”,”Sales”,”25000”)”””)
db.commit()
Inserts data into the employees table. The db.commit()line saves the changes.
newID = input(“Enter ID number: ”)
newame = input(“Enter name: ”)
newDept = input(“Enter department: ”)
newSalary = input(“Enter salary: ”)
cursor.execute(“““INSERT INTO employees(id,name,dept,salary)
VALUES(?,?,?,?)”””,(newID,newName,newDept,newSalary))
db.commit()
Allows a user to enter new data which is then inserted into the table.

cursor.execute(“SELECT * FROM employees”)
print(cursor.fetchall())
Displays all the data from the employees table.

db.close()
This must be the
last line in the
program to close
the database.

138

Challenges 139 - 145: SQLite

cursor.execute(“SELECT * FROM employees”)
for x in cursor.fetchall():
print(x)
Displays all the data from the employees table and displays each record on a separate
line.
cursor.execute(“SELECT * FROM employees ORDER BY name”)
for x in cursor.fetchall():
print(x)
Selects all the data from the employees table, sorted by name, and
displays each record on a separate line.

cursor.execute(“SELECT * FROM employees WHERE salary>20000”)
Selects all the data from the employees table where the salary is over 20,000.

cursor.execute(“SELECT * FROM employees WHERE dept=‘Sales’”)
Selects all the data from the employees table where the department is “Sales”.

cursor.execute(“““SELECT employees.id,employees.name,dept.manager
FROM employees,dept WHERE employees.dept=dept.dept
AND employees.salary >20000”””)
Selects the ID and name fields from the employees table and the manager field from the
department table if the salary is over 20,000.

cursor.execute(“SELECT id,name,salary FROM employees”)
Selects the ID, name and salary fields from the employees table.

Challenges 139 - 145: SQLite

139

whichDept = input(“Enter a department: ”)
cursor.execute(“SELECT * FROM employees WHERE dept=?”,[whichDept])
for x in cursor.fetchall():
print(x)
Allows the user to type in a department and displays the records of all the employees in
that department.

cursor.execute(“““SELECT employees.id,employees.name,dept.manager
FROM employees,dept WHERE employees.dept=dept.dept”””)
Selects the ID and name fields from the employees table and the manager field from the
department table, using the dept fields to link the data. If you do not specify how the
tables are linked, Python will assume every employee works in every department and
you will not get the results you are expecting.

cursor.execute(“UPDATE employees SET name = ‘Tony’ WHERE id=1”)
db.commit()
Updates the data in the table (overwriting the original data) to change the name to
“Tony” for employee ID 1.

cursor.execute(“DELETE employees WHERE id=1”)

140

Challenges 139 - 145: SQLite

Challenges
139

140

Create an SQL database called PhoneBook that
contains a table called Names with the following data:

Using the PhoneBook
database from program 139,
write a program that will
display the following menu.

141
Create a new SQL database called BookInfo that will
store a list of authors and the books they wrote.
It will have two tables. The first one should be called
Authors and contain the following data:

The second should be called Books and contain the
following data:

If the user selects 1, they
should be able to view the
entire phonebook. If they
select 2, it should allow them
to add a new person to the
phonebook. If they select 3, it
should ask them for a
surname and then display
only the records of people
with the same surname. If
they select 4, it should ask
for an ID and then delete that
record from the table. If they
select 5, it should end the
program. Finally, it should
display a suitable message if
they enter an incorrect
selection from the menu.
They should return to the
menu after each action, until
they select 5.

142
Using the BookInfo database from
program 141, display the list of
authors and their place of birth. Ask
the user to enter a place of birth and
then show the title, date published
and author’s name for all the books
by authors who were born in the
location they selected.

143
Using the BookInfo database, ask the user to
enter a year and display all the books
published after that year, sorted by the year
they were published.

Challenges 139 - 145: SQLite

141

144
Using the BookInfo database, ask the user for an author’s name and then save all the
books by that author to a text file, with each field separated by dashes so it looks as
follows:

Open the text file to make sure it has worked correctly.

You have learnt so much. Look back
on all the challenges and
programming techniques you have
learnt. It really is amazing..

145
Create a program that displays the following screen:

It should save the data to an SQL database called
TestScores when the Add button is clicked. The Clear
button should clear the window.

142

Challenges 139 - 145: SQLite

Answers
139

Challenges 139 - 145: SQLite

140

143

144
141

Challenges 139 - 145: SQLite

Challenges 139 - 145: SQLite

142

143

144

145

146
145

Challenges 139 - 145: SQLite

Part II
Chunky Challenges

148

Challenges 139 - 145: Part II

Challenge Introduction to Part II

149

Introduction to Part II
In this section, you are given some large programming challenges to work through.
These will take longer than the previous challenges and you are likely to have to
refer to earlier sections of the book to remind yourself of some of the key skills you
have covered. Don’t feel bad if you need to look up key lines of code in previous
sections; even experienced programmers get help when they come across a tricky piece of
code with which they are not familiar. It is all part of the learning process and is exactly how
this book was written to be used.
Each challenge contains a list of the skills that will be
needed so you can decide if you feel ready to attempt
the challenge. It also includes a description of the
challenge and a section outlining problems you will
have to overcome. The solutions in this section are
much larger and some are split over several pages, but
should be read as a continuous single program for that
challenge. If a program does need to be split across
separate pages we try to split it between the
subprograms or in a natural break if possible.
Read each challenge all the way through before
attempting it so you are aware of the pitfalls. Once you
have read through the challenge, sit back and have a
think about how you are going to approach it. You may
want to scribble some notes, or if you are feeling very
keen and know how, you may even venture into writing
a flow chart. There is no point in diving straight into
tapping out lines of code with no idea where you are
heading, as you are likely to get into a muddle and may
lose faith in your abilities. Make a plan, split the large
problem into small, manageable chunks, and then
tackle each chunk, testing each section as you go. Now,
make yourself a drink, grab a notebook and pencil, take
a deep breath, turn the page and have a go at the first
one.

150

Challenge 146: Shift Code

146: Shift Code
In this challenge you will need to use the following skills:
x input and display data;
x lists;
x splitting and joining strings;
x if statements;
x loops (while and for);
x subprograms.

The Challenge
A shift code is where a message can be easily encoded and is one of the simplest codes to
use. Each letter is moved forwards through the alphabet a set number of letters to be
represented by a new letter. For instance, “abc” becomes “bcd” when the code is shifted by
one (i.e. each letter in the alphabet is moved forward one character).
You need to create a program which will display the following menu:

If the user selects 1, they should be able to type in a message (including spaces) and then
enter a number. Python should then display the encoded message once the shift code has
been applied.
If the user selects 2, they should enter an encoded message and the
correct number and it should display the decoded message (i.e.
move the correct number of letters backwards through the
alphabet).
If they select 3 it should stop the program from running.
After they have encoded or decoded a message the menu should be
displayed to them again until they select quit.

Challenge 146: Shift Code

151

Problems You Will Have to
Overcome
Decide if you want to allow both upper and lower case letters or if you want to convert all
the data into one case.
Decide if you are allowing punctuation.
If the shift makes the letter go past the end of the alphabet it should start again; i.e. if the
user enters “xyz” and 5 is entered as the shift number, it should display “bcd”. This should
work the opposite way for decoding a message, so if the value gets to “a” it will go back to
“w”.
Make sure that suitable messages are displayed if the user selects an inappropriate option
on the menu or selects an inappropriate number to make the shift code.
Test out your decode option by decoding the message “we
ovugjohsslunl”, which was created with the number 7 when
the code only uses “abcdefghijklmnopqrstuvwxyz ” (note the
space at the end).

152

Challenge 146: Shift Code

Answer

Challenge 147: Mastermind

153

147: Mastermind
In this challenge you will need to use the following skills:
x input and display data;
x lists;
x random choice from a list;
x if statements;
x loops (while and for);
x subprograms.

The Challenge
You are going to make an on-screen version of the board game “Mastermind”. The
computer will automatically generate four colours from a list of possible colours (it should
be possible for the computer to randomly select the same colour more than once). For
instance, the computer may choose “red”, “blue”, “red”, “green”. This sequence should not
be displayed to the user.
After this is done the user should enter their choice of four colours from the same list the
computer used. For instance, they may choose “pink”, “blue”, “yellow” and “red”.
After the user has made their selection, the program should display how many colours they
got right in the correct position and how many colours they got right but in the wrong
position. In the example above, it should display the message “Correct colour in the correct
place: 1” and “Correct colour but in the wrong place: 1”.
The user continues guessing until they correctly enter the four colours in the order they
should be in. At the end of the game it should display a suitable message and tell them how
many guesses they took.

154

Challenge 147: Mastermind

Problems You Will Have to
Overcome
The hardest part of this game is working out the logic for checking how many the user has
correct and how many are in the wrong place. Using the example above, if the user enters
“blue”, “blue”, “blue”, “blue” they should see the messages, “Correct colour in the correct
place: 1” and “Correct colour but in the wrong place: 0”.
Decide if there is an easier way of allowing the user to enter their selection (e.g. using a
code or a single letter to represent the colour). If using the first letter, make sure you only
use colours that have a unique first letter (i.e. avoid using blue, black and brown as options
and select just one of these as a possibility). Make your instructions clear to the user.
Decide if you want to allow upper and lower case or if it is easier to convert everything to
the same case.
Make sure you build in validation checks to make sure the user is
only entering valid data and display a suitable message if they make
an incorrect selection. If they do make an incorrect selection you
may want to allow them to enter the data again, rather than class it
as an incorrect guess.

Challenge 147: Mastermind

Answer

155

156

Challenge 148: Passwords

148: Passwords
In this challenge you will need to use the following skills:
x input and display data;
x lists;
x if statements;
x loops (while and for);
x subprograms;
x saving to and reading from a .csv file.

The Challenge
You need to create a program that will store the user ID and passwords for the users of a
system. It should display the following menu:

If the user selects 1, it should ask them to enter a user ID. It should check if the user ID is
already in the list. If it is, the program should display a suitable message and ask them to
select another user ID. Once a suitable user ID has been entered it should ask for a
password. Passwords should be scored with 1 point for each of the following:
x it should have at least 8 characters;
x it should include uppercase letters;
x it should include lower case letters;
x it should include numbers; and
x it should include at least one special character such as !, £, $, %, &, <, * or @.
If the password scores only 1 or 2 it should be rejected with a message saying it is a weak
password; if it scores 3 or 4 tell them that “This password could be improved.” Ask them if

Challenge 148: Passwords

157

they want to try again. If it scores 5 tell them they have selected a strong password. Only
acceptable user IDs and passwords should be added to the end of the .csv file.
If they select 2 from the menu they will need to enter a user ID, check to see if the user ID
exists in the list, and if it does, allow the user to change the password and save the changes
to the .csv file. Make sure the program only alters the existing password and does not
create a new record.
If the user selects 3 from the menu, display all the user IDs but not the
passwords.
If the user selects 4 from the menu it should stop the program.

Problems You Will Have to
Overcome
As existing data in .csv files cannot be edited and can only be read or added to, you will
need to import the data as a temporary list into Python so you can make the changes before
the data is written to the .csv file afresh.
Make sure only passwords belonging to an existing user ID can be altered.
Use suitable messages to guide the user easily through the system.
Repeat the menu until they quit the program.

158

Challenge 148: Passwords

Answer
For this challenge you will need to set up a .csv file first, called “passwords.csv”. You can
either use code to do this or simply create an Excel file and save it as a .csv file. It needs to
be stored in the same location as the file.

Continues on next page…

Challenge 148: Passwords

Continues on next page…

159

160

Challenge 148: Passwords

Challenge 149: Times Tables (GUI )

161

149: Times Tables
(GUI )
In this challenge you will need to use the following skills:
x loops (while and for);
x subprograms;
x Tkinter library.

The Challenge
Create a program that will display the following screen:

162

Challenge 149: Times Tables (GUI )

When the user enters a number in the first box
and clicks on the “View Times Table” button it
should show the times table in the list area.
For instance, if the user entered 99 they would see
the list as shown in the example on the right.
The “Clear” button should clear both boxes.

Problems You
Will Have to Overcome
You want to display the number sentence in the list rather than just the answers. The
following line of code may help you do this:

Make sure it is as easy to use as possible by making sure the focus is in the correct location.

Challenge 149: Times Tables (GUI )

Answer

163

164

Challenge 150: Art Gallery

150: Art Gallery
In this challenge you will need to use the following skills:
x Tkinter library;
x SQLite 3.

The Challenge
A small art gallery is selling works from different artists and wants to keep track of the
paintings using an SQL database. You need to create a user-friendly system to keep track of
the art. This should include using a GUI. Below is the current data that needs to be stored
in a database.
Artists Contact Details:
ArtisttID
1
2
3
4
5

Name
Martin Leighton
Eva Czarniecka
Roxy Parkin
Nigel Farnworth
Teresa Tanner

Address
5 Park Place
77 Warner Close
90 Hindhead Road
41 Whitby Road
70 Guild Street

Town
Peterborough
Chelmsford
Huntly

County
Cambridgeshire
Essex
London
Aberdeenshire
London

Postcode
PE32 5LP
CM22 5FT
SE12 6WM
AB54 5PN
NW7 1SP

Pieces of Art:
PieceID
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

ArtistID
5
5
2
1
3
4
1
2
4
1
5
2
4
3
1
4
4

Title
Woman with black Labrador
Bees & thistles
A stroll to Westminster
African giant
Water daemon
A seagull
Three friends
Summer breeze 1
Mr Hamster
Pulpit Rock, Dorset
Trawler Dungeness beach
Dance in the snow
St Tropez port
Pirate assassin
Morning walk
A baby barn swallow
The old working mills

Medium
Oil
Watercolour
Ink
Oil
Acrylic
Watercolour
Oil
Acrylic
Watercolour
Oil
Oil
Oil
Ink
Acrylic
Oil
Watercolour
Ink

Price
220
85
190
800
1700
35
1800
1350
35
600
195
250
45
420
800
35
395

Challenge 150: Art Gallery

165

Problems You Will Have to
Overcome
The art gallery must be able to add new artists and pieces of art.
Once a piece of art has been sold, the data about that art should be removed from the main
SQL database and stored in a separate text file.
Users should be able to search by artist, medium or price.

166

Challenge 150: Art Gallery

Answer

Continues on next page…

Challenge 150: Art Gallery

Continues on next page…

167

168

Challenge 150: Art Gallery

What Next?

169

What Next?
If you have worked through all the examples in this book you should have a good
understanding of the basics of programming with Python. You will have become familiar
with the syntax of the language and started to think like a programmer by breaking down
larger problems into small, manageable chunks you know how to solve. You should look
back on all you have learnt and can justifiably feel a smirk of satisfaction at what you have
achieved. Learning to program takes dedication and you have shown you can persevere,
and you now have the basic skills to continue on your journey into Python.
The skills you have learnt in this book will allow you to create powerful programs, but now
is not the time to sit back and relax. You need to go out into the big programming world and
find out how other programmers work. Search the internet, find new challenges. As you
explore you will see code that is unfamiliar to you as there are several variations that can be
used. For instance, with Tkinter there is another method called “pack” which many
programmers prefer. It allows you to use a grid method for designing your screens but does
not allow you to fine-tune the position of an object the way the place method we have been
using allows. Try it out, you may prefer it, but do be careful as some techniques do not work
well with others. If you want to use the pack method then please don’t try to mix it with the
place method in the same program. Python doesn’t like working with two different systems
simultaneously and will crash.
The best way to learn more advanced programming techniques is to try them
out. Look at other people’s code and visit some chat forums. Programmers are
very helpful and as long as you are not asking a
question that has already been answered on the forum
they are generally willing to help you out. If you are stuck
on a piece of code, then ask for help in a forum;
programmers like nothing more than to solve a problem.
You may not necessarily agree with their solution, it may
not be the method you are looking to use, but it will give
you an idea of how to look at it with fresh eyes and can
show you a route to a possible solution you had not
considered before.
Whether you feel satisfied with your knowledge or want to
explore further, I hope you have enjoyed your venture into
programming and this book has proved useful.

170

Glossary

Glossary
Term
2D list

Description
Creates a multi-dimensional list. For instance, to create the following
table of data:

enter the following code:
addition

Adds two values together if they are numbers
or joins them if they contain text (see concatenation).

and

Used to specify that both conditions must be met to return a true
value.

append

Adds a single item to the end of a list, tuple, dictionary, string or an
array.

append to a file

Opens an existing text or .csv file and allows data to be added to the
end of the existing contents.

argument

array

blob

See also write to a file, write to non-existing file, read a file
A value passed to a subprogram. In this example UserAns is the
argument and would have been defined outside of the subprogram.

In Python arrays are similar to lists but they are only used to store
numbers. The user defines the specific number type, i.e. integer,
long, double or floating-point.
If the array needs to store strings a list is required.
A data type that is stored exactly as it was input. See SQL and
database.

Glossary
Term
button

171

Description
Used in a GUI with Tkinter. The code below creates a button that will
run the subprogram “click”.

capitalize

See Tkinter.
Changes the case so the first letter is uppercase and all other letters
are lower case.

choice

Selects a random choice from a list of options.

commaseparated values
comments

A common textual representation for tables in which the values in
each row are separated by commas. See csv.
Used to explain how a program works or to block out pieces of code
for testing other sections. Starts with the # symbol.

compiler
concatenation

Translates a program written in a high-level language such as
Python into a low-level language such as machine code.
Joins two strings together to form one string (see addition).

conditional
statement

Statement used to test out a condition. Commonly used in if
statements, while and for loops.

count

Counts the number of times a piece of data appears in a list, tuple,
dictionary, string or an array.

csv

A file type, similar to a spreadsheet or database, where data is stored
in rows and columns. See comma-separated values.
Defines the values inside a dictionary.

curly brackets
database
debugging
decimal point
def

A structured set of data. The data is held in tables and these are
made up of fields and records. See SQL, tables, fields and records.
The process of finding and removing programming errors.
See floating-point number.
Defines a subprogram.

defining a
subprogram
del

Creates a subprogram so that it can be used in other parts of the
program. See def.
Deletes an item from a list. For example:

dictionary

Deletes item 2 from the “names_list”.
A type of list in which user-defined indexes are mapped to values.

division

Divides one value by another and displays the answer as a floatingpoint number.

172

Glossary

Term
double
drop-down menu
elif

Description
Allows decimal places with numbers ranging from minus 10,308 to
10,308.
See option menu and Tkinter.
Used in an if statement to check a new condition if previous
conditions have not been met.

else

Used in an if statement to define what happens if the previous
conditions have not been met.

else…if
entry box

See elif.
Used in a GUI with Tkinter to allow the user to input data or used to
display output. The code below creates a blank entry box.

equal to

See Tkinter.
The double equal symbol is used to compare values

extend

Adds multiple items to the end of a list, tuple, dictionary, string or an
array.

field

In a database a field is a single piece of data such as a name, date of
birth or telephone number that is stored in a table. See SQL,
database, table and record.
Allows decimal places with numbers ranging from minus 1,038 to
1,038 (i.e. allows up to 38 numeric characters including a single
decimal point anywhere in that number and can be negative or
positive value)

floating-point
number

for loop

A type of loop which will repeat the block of code a set number of
times.

forward

Moves the turtle forward; if the pen is down this will leave a trail
behind it as it moves, drawing a straight line on the screen.

greater than
greater than or
equal to
GUI

In the above example it will move 50 steps.
To check if one value is larger than another.
To check if one value is larger than or equal to another.
GUI stands for graphical user interface and uses windows, entry
boxes and menus, which can be manipulated by a mouse. See
Tkinter.

Glossary
Term
hash
IDLE
if statement

images

173

Description
See comments.
Stands for “integrated development environment” and is a basic
editor and interpreter environment for Python.
Checks to see if a condition is met; if it is it will perform the
subsequent lines of code.

Images can be displayed using GUI. There are two ways images can
be seen. In this first block of code the logo will be shown and this will
not change as the program is running.

In this second block of code the image will change depending on the
value selected in an option menu.

immutable

in

See Tkinter and option menu.
Unchangeable. The value of immutable data cannot be altered after
it has been created, e.g. the data in a tuple is immutable and
therefore once a program starts running it cannot be changed.
Can be used to check a character is in a string. This is useful in both
for and if statements. This is an example of a for statement which will
print each character on a separate line:

Here is an example to see if a letter is within a string:

indent

index

indices

Used in Python to denote lines that belong to another statement. For
instance, in a for loop the lines beneath it are indented as they are
within the loop, the lines that are not indented are outside the loop.

To indent a line, you can hit either the tab key or use the space bar.
A number that specifies the location of a single value in a list, tuple,
dictionary or string. Python starts counting from 0, not 1, so if the
index is automatically generated the first item would have the index
value of 0.

The double * is used to represent “to the power of” i.e. 4**2 is 42.

174

Glossary
Term

input

Description
Allows the user to input a value. This is usually assigned to a variable
name.

insert

Inserts an item into a set position in the list and pushes everything
else along to make space. This will change their index numbers
according to their new position in the list.

int

Used to define a number as an integer.

integer
interpret
islower

A whole number between minus 32,768 and 32,767.
To execute a program by translating it one line at a time.
Used to check if a string contains only lower case letters.

isupper

Used to check if a string contains only upper case letters.

iteration
label

Repeating code, for instance in a for or a while loop.
Used in a GUI with Tkinter to display text of an image. The code
below creates a label on the screen displaying the message shown.

left

See Tkinter.
Turns the turtle counter clockwise.

len

In the above example it will turn 120°.
Determines the length of the variable.

less than

To check if one value is smaller than another.

less than or
equal to
library

To check if one value is smaller than or equal to another.

line break

Forces the text onto a new line.

A collection of code that can be used to perform a specific function.
This is code that is not in Python standard blocks of code but can be
imported as needed. To do this, import the library at the beginning of
the program.

Produces the output:

list

Used like an array in other programming languages. Lists allow a
group of data to be stored under a single variable name and can be
altered while the program is running.

Glossary
Term
list box

175

Description
Used in a GUI with Tkinter. The code below creates a list box that is
only used for output.

long
loop
lower case

See Tkinter.
An error that is tricky to spot. The program may look like it works (i.e.
no error message appears) but the theory behind the program is
incorrect so it is not working correctly. For instance, when the wrong
comparison symbol is used.
Whole number between minus 2,147,483,648 and 2,147,483,647.
See for loop and while loop.
Changes a string to lower case.

multiplication

Multiplies two values together.

nested

A sequence inside another sequence, for instance a for loop may be
inside an if statement and therefore the for loop is known as a nested
statement inside the if statement.

not equal to

Used to check if two values are not equal.

not null

When creating an SQL table, you can specify if a field is not allowed
to be left blank when a new record is created.

logic errors

option menu

See SQL, database, table and field.
Creates a drop-down menu in a GUI.

or

See Tkinter.
Used to specify that only one condition needs to be met.

output box

passing variables
pendown

Used in a GUI with Tkinter and creates a message box which is used
to display output.
See Tkinter.
Creating or altering a variable in one subprogram and allowing it to
be used in another section of the program. See subprogram.
Places the pen on the page so that when the turtle moves it will leave
a trail behind it. By default, the pen is down.

176

Glossary

Term
penup

Description
Removes the pen from the page so that as the turtle moves it does
not leave a trail behind it.

pi

Gives pi (π) to 15 decimal places.

pop

Removes the last item from a list, tuple, dictionary, string or an array.

power of
primary key

See indices.
A primary key in a database is a unique identifying field for each
record.

print
prompt

See SQL, database, table, record and field.
Displays the contents between the brackets on screen.

query

Shown as >>> in the Python shell window and allows the user to
input directly into the shell.
A query is used to extract data from the database.

quote mark
randint

See SQL, database, table and field.
See speech mark.
Generates a random number.

random

Generates a random floating point number between 0 and 1.

random library

To use the random library in Python you must have the line “import
random” at the start of your program. See also randint, choice,
random and randrange.

randrange

Picks a number from within a range of numbers. It is possible to even
select the steps that range can take, for instance:
This will pick a random number between the numbers 0 and 100 in
steps of 5, e.g. it will only pick from 0, 5, 10, 15, 20, etc.

Glossary
Term
range

177

Description
Used to define a starting and end number in a range and can include
the step (the difference between each number in the sequence).
Usually used as part of a for loop.
Would produce the output:

read a file

real
record

remainder

Opens an existing text or .csv file so the data can be read.
See also write to a file, write to non-existing file, append to a file
A data type used in SQL databases that can store a decimal place.
See floating-point number, SQL and database.
In a database a record is one complete set of fields; for example one
employee’s set of data would be stored in a single row of a table. See
SQL, database, table and field.
Finds the remainder after a whole number division.

remove

Deletes an item from the list. This is useful if you do not know the
index of that item. If there is more than one instance of the data it will
only delete the first instance of that data.

reverse

Reverses the order of a list, tuple, dictionary, string or an array.

right

Turns the turtle clockwise.

round

In the above example it will turn 90°.
Rounds a variable to a specified number of decimal places.

round brackets

Defines the values inside the brackets as a tuple. See tuple.

run time error

These errors only crop up when you try to run the program. For
instance, it may not be able to work with a variable as it is saved as a
string when it is expecting an integer. Run time errors will crash the
program and display an error message such as the following.

running a
program
shell

Select the Run menu and select Run Module, alternatively use the F5
key. The program must be saved before it can run.
The first screen you see when you launch Python.

178

Glossary
Term

sort

Description
Sorts a list into alphabetical order and saves the list in the new order.
This does not work if the list is storing data of different types, such as
strings and numeric data in the same list.

sorted

Prints a list in alphabetical order. This does not alter the order of the
original list and it is still kept in the original order. This does not work
if the list is storing data of different types, such as strings and
numeric data in the same list.

space (removal)
speech marks

See strip.
Used to define a block of code as a string. You can use either double
quotes (") or single quotes (') but whatever you use to start your
string you must use the same style to define the end of the string.
You can use triple speech marks to preserve the formatting such as
line breaks.

SQL

SQLite
sqrt

Stands for Structured Query Language, which is used to
communicate with a database. A database can contain several tables
joined together, which is known as a relation database. Each table is
made up of fields that contain similar data such as ID, Name,
Address, etc. Each row in the table is known as a record. See
database, field, record, table and query.
A simple database that is free to download and works well with
Python.
Works out the square root of a number. You need to import the math
library at the start of your program for this to work.

square brackets

Defines the values inside the brackets as a list. See list.

square root
str

See sqrt.
A data type as string. See string.

string

Can include letters, numbers and various symbols and be enclosed
by either double or single quotes. They cannot be used in a
calculation, even if they only contain numbers. They can, however,
be used in concatenation and joined onto other strings to make a
larger string. See concatenation.
Removes additional characters from the start and end of a string.

strip

Structured Query
Language

See SQL.

Glossary

179

Term
subprogram

Description
A block of code that can be called to run from another section of the
program and can return a value.

subtraction

Subtracts one value from another.

syntax error

A programming error that occurs when statements are in the wrong
order or contain typographical errors.
A container for the data. A database may contain more than one
table and these can be linked together. Below is an example of a
table to store employees’ data.

table

See SQL, database, field and record.

180

Glossary

Term
text file

Description
A file object that is imported into Python and allows the program to
read and write string objects to that file.

text file
title

See also write to a text file, read a text file and append to a text file.
Changes the case so all words start with a capital and the rest are in
lower case.

Tkinter
to the power of
trim spaces
tuple

Tkinter is Python's most commonly used GUI library.
See indices.
See strip.
A type of list but the values cannot be altered as the program is
running. Usually reserved for menu options that are unlikely to
change.

turtle

A tool used for drawing shapes on the screen.

two-dimensional
list
upper

See also forward, left, right, penup, pendown and pensize.
See 2D list.
Changes a string to uppercase.

variables

Stores values such as text and numbers. The equal sign (=) is used
to assign values to variables.

while loop

A type of loop that will repeat the block of code inside it (shown with
indented rows) as long as a particular condition is being met.

whole number
division

The process by which you find how many times a number (divisor) is
contained in another number (dividend).

window

The screen used in a GUI. The code below creates a window,
referred to as “window”, adds a title and defines the size of the
window.

See Tkinter.

Glossary
Term
write to a file

write to nonexisting file

181

Description
Creates a new text or .csv file to save values into; if one already exists
then it will be overwritten with a new file.

See also write to non-existing file, append to a file, read a file.
Creates a new file and writes to that file. If the file already exists, the
program will crash rather than overwrite it.

See also write to a file, append to a file, read a file.

182

Index

Index
array, 72, see also list
blob, 136
brackets
curly, 60
round, 60
square, 60

case sensitive, 12
comments, 6
decimal place, 31
double, 72
download
Python, 4
SQLite, 134

error message, 25
external data
adding a new record, 93
append mode, 86
append to a text file, 87
create a text file, 87
csv, 91, 156
new csv, 93
new file, 92
open text file, 87
printing data, 93
read mode, 86, 92
searching for data, 93
SQL, see also SQL
temporary list, 94
text file, 86
write mode, 86, 92

file location, 6
file name extension, 11
floating-point number, 31, 46, 72
formatting, 7
GUI, 110
IDLE, 5, 7
if statement, 19, 150, 153, 156
if...elif...else, 19
if...else, 19
nested if, 19

import
array, 73

math, 31
random, 45
SQLite3, 137
Tkinter, 112

indenting, 18
index, 27, 60, 80
input, 13, 150, 153, 156
integer, 13, 31, 47, 72, 136
list, 150, 153, 156
2D lists, 79
append, 60, 81
array, 72
count, 73
delete, 81
delete item, 60
dictionary, 59
insert, 61
length, 61
list, 58
pop, 73
reverse, 73
sort, 60, 73
tuple, 58

long, 72
loops, 150, 153, 156, 161
for, 35–39
nested, 51
while, 40–44

mathematical operators
addition, 13
division, 13
multiplication, 13
pi, 31
power of, 31
remainder, 31
rounding, 31
subtraction, 13
whole number division, 13, 31

non-exam assessment, 3
null, 136
one-to-many, 136
operators, 18, 41
and, 18, 20, 41

Index
equal to, 18, 41
greater than or equal to, 18, 41
greater than, 18, 41
in, 36
less than, 18, 41
less than or equal to, 18, 41
not equal to, 18, 41
or, 18, 20, 41

print, 13, 81, 150, 153, 156
random, 45–50, 153
choice, 46
number, 46
randint, 46
randrange, 46

real, 138
relational database, 135
running programs, 12
running Python, 5
shell, 11
SQL, 164
close, 137
connect, 137
create table, 137
data type, 138
delete, 141
fetch data, 140
fields, 137
primary key, 138
print, 139
SQLite, 136
update table, 141
write to table, 139

strings, 24–30, 67, 150
add characters, 68
capitalize, 27
concatenation, 26
double quote, 24

183

length, 27
line break, 26
lower case, 19
remove characters, 27
single quote, 24
title case, 27
upper case, 27, 68

subprograms, 99, 150, 153, 156, 161
calling a subprogram, 101
defining a subprogram, 101
passing variables, 99

text, 138
Tkinter, 110, 161, 164
background colour, 112, 126
button, 112
change contents, 113
delete contents, 113
entry box, 112
image, 128
justification, 112
list box, 112
message box, 112
pack, 169
position, 113
window, 112

turtle, 51–57
background colour, 52
fill, 52
forward, 52
left, 52
pen down, 52
pen size, 52
pen up, 52
show/hide turtle, 52

variables, 12, 13, 25, 58, 99, 126
whole number, 46

